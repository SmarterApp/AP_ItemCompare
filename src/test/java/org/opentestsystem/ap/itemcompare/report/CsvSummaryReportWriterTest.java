package org.opentestsystem.ap.itemcompare.report;

import com.google.common.collect.ImmutableList;
import lombok.extern.slf4j.Slf4j;
import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.TemporaryFolder;
import org.junit.runner.RunWith;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.itemcompare.model.CompareContext;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.ap.itemcompare.CompareModelSupport.compareContext;
import static org.opentestsystem.ap.itemcompare.CompareModelSupport.itemDifference;

@RunWith(MockitoJUnitRunner.class)
@Slf4j
public class CsvSummaryReportWriterTest {

    private static final List<String> DifferenceTypes = ImmutableList.of("DIFF_A", "DIFF_B", "DIFF_C");

    @Rule
    public TemporaryFolder folder = new TemporaryFolder();

    @Rule
    public final ExpectedException thrown = ExpectedException.none();

    private Path reportFile;

    private CsvSummaryReportWriter reportWriter;

    @Before
    public void setup() throws Exception {
        reportFile = folder.newFolder().toPath().resolve("summary.csv");
        reportWriter = new CsvSummaryReportWriter(reportFile, DifferenceTypes);
    }

    @After
    public void tearDown() {
        reportWriter.close();
    }

    @Test
    public void itShouldCreateASummaryReport() throws Exception {
        final CompareContext compareContextA = mockCompareContext("123");
        final CompareContext compareContextB = mockCompareContext("456");
        compareContextB.getDifferences().add(itemDifference("DIFF_B"));
        compareContextB.getErrorMessages().add("Some Error");

        reportWriter.writeDifferences(compareContextA);
        reportWriter.writeDifferences(compareContextB);
        reportWriter.flush();

        final List<String> csvContents = Files.readAllLines(reportFile);
        assertThat(csvContents).hasSize(3); //header and two rows
        assertThat(csvContents.get(0)).isEqualTo("ITEM_ID,ITEM_TYPE,ERRORS,DIFF_A,DIFF_B,DIFF_C");
        assertThat(csvContents.get(1)).isEqualTo("123,eq,0,2,0,1");
        assertThat(csvContents.get(2)).isEqualTo("456,eq,1,2,1,1");
    }

    @Test
    public void itShouldHandleABadReportPath() {
        thrown.expect(IllegalArgumentException.class);
        thrown.expectMessage("Unable to create summary report file");

        final Path invalidPath = Paths.get("/nowhere/blah.csv");
        new CsvSummaryReportWriter(invalidPath, DifferenceTypes);
    }

    @Test
    public void itShouldBeMultiThreadSafe() throws Exception {
        final int concurrency = 10;
        final ExecutorService executor = Executors.newFixedThreadPool(concurrency);
        final Semaphore startupSemaphore = new Semaphore(0);
        final Semaphore executeSemaphore = new Semaphore(0);
        final Semaphore completeSemaphore = new Semaphore(0);

        for (int i = 0; i < concurrency; i++) {
            final int idx = i;
            executor.submit(() -> {
                startupSemaphore.release();
                try {
                    final CompareContext compareContextA = mockCompareContext(String.valueOf(idx));
                    if (executeSemaphore.tryAcquire(5, TimeUnit.SECONDS)) {
                        reportWriter.writeDifferences(compareContextA);
                    } else {
                        log.error("Could not acquire permit");
                    }
                    completeSemaphore.release();
                } catch (final InterruptedException e) {
                    log.error("Interrupted ");
                }
            });
        }

        //Wait for threads to start
        startupSemaphore.tryAcquire(concurrency, 5, TimeUnit.SECONDS);

        //Execute threads simultaneously
        executeSemaphore.release(concurrency);

        //Wait for completion
        completeSemaphore.tryAcquire(concurrency, 5, TimeUnit.SECONDS);

        executor.shutdown();

        reportWriter.flush();
        final List<String> csvContents = Files.readAllLines(reportFile);
        assertThat(csvContents).hasSize(concurrency + 1); //header and all entries
    }

    private CompareContext mockCompareContext(final String itemId) {
        final CompareContext compareContext = compareContext(itemId);
        compareContext.getDifferences()
            .addAll(ImmutableList.of(
                itemDifference("DIFF_A"),
                itemDifference("DIFF_A"),
                itemDifference("DIFF_C")
                ));
        return compareContext;
    }
}