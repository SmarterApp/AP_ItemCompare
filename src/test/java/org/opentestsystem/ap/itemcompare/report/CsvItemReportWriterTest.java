package org.opentestsystem.ap.itemcompare.report;

import com.google.common.collect.ImmutableList;
import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.TemporaryFolder;
import org.junit.runner.RunWith;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.itemcompare.model.CompareContext;
import org.opentestsystem.ap.itemcompare.model.ItemDifference;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.ap.itemcompare.CompareModelSupport.compareContext;
import static org.opentestsystem.ap.itemcompare.CompareModelSupport.itemDifference;

@RunWith(MockitoJUnitRunner.class)
public class CsvItemReportWriterTest {

    @Rule
    public TemporaryFolder folder = new TemporaryFolder();

    @Rule
    public final ExpectedException thrown = ExpectedException.none();

    private Path reportFile;

    private CsvItemReportWriter reportWriter;

    @Before
    public void setup() throws Exception {
        reportFile = folder.newFolder().toPath().resolve("1234.csv");
        reportWriter = new CsvItemReportWriter(reportFile);
    }

    @After
    public void tearDown() throws Exception {
        reportWriter.close();
    }

    @Test
    public void itShouldWriteAnItemDifferenceReport() throws Exception {
        final CompareContext compareContext = mockCompareContext("123");
        compareContext.getErrorMessages().addAll(ImmutableList.of(
            "Error 1",
            "Error 2"
        ));

        final List<ItemDifference> differences = compareContext.getDifferences();

        reportWriter.writeDifferences(compareContext);
        reportWriter.flush();

        final List<String> csvContents = Files.readAllLines(reportFile);
        assertThat(csvContents).hasSize(6); //header, 3 differences, 2 errors
        assertThat(csvContents.get(0)).isEqualTo("DIFFERENCE_TYPE,FILENAME,LOCATION,IMPORT_VALUE,TIMS_VALUE");
        assertThat(csvContents.get(1)).isEqualTo("ERROR,,,,Error 1");
        assertThat(csvContents.get(2)).isEqualTo("ERROR,,,,Error 2");
        assertThat(csvContents.get(3)).isEqualTo(getDifferenceReport(differences.get(0)));
        assertThat(csvContents.get(4)).isEqualTo(getDifferenceReport(differences.get(1)));
        assertThat(csvContents.get(5)).isEqualTo(getDifferenceReport(differences.get(2)));
    }

    @Test
    public void itShouldHandleABadReportPath() {
        thrown.expect(IllegalArgumentException.class);
        thrown.expectMessage("Unable to create item difference report file");

        final Path invalidPath = Paths.get("/nowhere/blah.csv");
        new CsvItemReportWriter(invalidPath);
    }

    private CompareContext mockCompareContext(final String itemId) {
        final CompareContext compareContext = compareContext(itemId);
        compareContext.getDifferences()
            .addAll(ImmutableList.of(
                itemDifference("DIFF_A"),
                itemDifference("DIFF_A"),
                itemDifference("DIFF_C")
            ));
        return compareContext;
    }

    private String getDifferenceReport(final ItemDifference difference) {
        return String.join(",", ImmutableList.of(
            difference.getDifferenceType(),
            difference.getFilename(),
            difference.getLocation(),
            difference.getSourceValue(),
            difference.getTestValue()
        ));
    }
}