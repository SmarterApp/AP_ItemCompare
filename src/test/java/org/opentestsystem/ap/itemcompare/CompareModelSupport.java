package org.opentestsystem.ap.itemcompare;

import com.google.common.collect.ImmutableList;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.itemcompare.model.CompareContext;
import org.opentestsystem.ap.itemcompare.model.ItemComparison;
import org.opentestsystem.ap.itemcompare.model.ItemDifference;
import org.opentestsystem.ap.itemcompare.model.ItemReference;

import java.nio.file.Paths;
import java.util.Collections;
import java.util.UUID;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * Test support class for generating mock models.
 */
public class CompareModelSupport {

    public static CompareContext compareContext(final String itemId) {
        final CompareContext compareContext = new CompareContext(itemId);
        compareContext.setItemComparison(itemComparison(itemId));
        return compareContext;
    }

    public static ItemComparison itemComparison(final String itemId) {
        return ItemComparison.builder()
            .itemId(itemId)
            .test(itemReference())
            .source(itemReference())
            .build();
    }

    public static ItemReference itemReference() {
        return ItemReference.builder()
            .itemRelease(releaseWithResources())
            .itemXml(Paths.get("/mock/my-item.xml"))
            .build();
    }

    public static ItemRelease releaseWithResources() {
        final ItemRelease.Item.MachineRubric rubric = mock(ItemRelease.Item.MachineRubric.class);
        when(rubric.getFilename()).thenReturn("Item_183704_v11.qrx");

        final ItemRelease.Item.RendererSpec rendererSpec = mock(ItemRelease.Item.RendererSpec.class);
        when(rendererSpec.getFilename()).thenReturn("Item_183704_v11.eax");

        final ItemRelease.Item.Content englishContent = mock(ItemRelease.Item.Content.class, "English Content");
        when(englishContent.getLanguage()).thenReturn("ENU");
        when(englishContent.getStem()).thenReturn("<p>English Stem</p>");

        final ItemRelease.Item.Content spanishContent = mock(ItemRelease.Item.Content.class, "Spanish Content");
        when(spanishContent.getLanguage()).thenReturn("ESN");
        when(spanishContent.getStem()).thenReturn("<p>Spanish Stem</p>");

        final ItemRelease.Item item = mock(ItemRelease.Item.class);
        when(item.getFormat()).thenReturn("eq");
        when(item.getMachineRubric()).thenReturn(Collections.singletonList(rubric));
        when(item.getRendererSpec()).thenReturn(Collections.singletonList(rendererSpec));
        when(item.getContent()).thenReturn(ImmutableList.of(englishContent, spanishContent));

        final ItemRelease itemRelease = mock(ItemRelease.class);
        when(itemRelease.getItem()).thenReturn(item);
        return itemRelease;
    }

    public static ItemDifference itemDifference(final String differenceType) {
        return ItemDifference.builder()
            .differenceType(differenceType)
            .location(UUID.randomUUID().toString())
            .testValue(UUID.randomUUID().toString())
            .sourceValue(UUID.randomUUID().toString())
            .filename("filename")
            .build();
    }

    public static ItemComparison passageComparison(final String itemId) {
        return ItemComparison.builder()
            .itemId(itemId)
            .test(passageReference())
            .source(passageReference())
            .build();
    }

    private static ItemReference passageReference() {
        return ItemReference.builder()
            .itemRelease(passageReleaseWithResources())
            .itemXml(Paths.get("/mock/my-stim.xml"))
            .build();
    }

    private static ItemRelease passageReleaseWithResources() {
        final ItemRelease.Passage.Content englishContent = mock(ItemRelease.Passage.Content.class, "English Content");
        when(englishContent.getLanguage()).thenReturn("ENU");
        when(englishContent.getStem()).thenReturn("<p>English Stem</p>");

        final ItemRelease.Passage.Content spanishContent = mock(ItemRelease.Passage.Content.class, "Spanish Content");
        when(spanishContent.getLanguage()).thenReturn("ESN");
        when(spanishContent.getStem()).thenReturn("<p>Spanish Stem</p>");

        final ItemRelease.Passage item = mock(ItemRelease.Passage.class);
        when(item.getFormat()).thenReturn("stim");
        when(item.getContent()).thenReturn(ImmutableList.of(englishContent, spanishContent));

        final ItemRelease itemRelease = mock(ItemRelease.class);
        when(itemRelease.getPassage()).thenReturn(item);
        return itemRelease;
    }
}
