package org.opentestsystem.ap.itemcompare.util;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.itemcompare.CompareService;
import org.opentestsystem.ap.itemcompare.report.CompareReport;

import javax.validation.constraints.AssertTrue;
import java.io.File;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

@Slf4j
@RunWith(MockitoJUnitRunner.class)
public class CompareUtilTest {

    @Test
    public void createSummaryReport() {
        try {
            String reportName = "summary-report.csv";

            List<CompareService.CompareContext> processedItems = new ArrayList<>();
            processedItems.add(new CompareService.CompareContext("2836"));
            processedItems.add(new CompareService.CompareContext("11065"));
            processedItems.add(new CompareService.CompareContext("11417"));
            processedItems.add(new CompareService.CompareContext("18786"));
            processedItems.add(new CompareService.CompareContext("25265"));
            processedItems.add(new CompareService.CompareContext("51576"));
            processedItems.add(new CompareService.CompareContext("76749"));

            Path resourceFiles = getFileFromResources("report-files/tims-compare").toPath();
            Path tempDirectory = Files.createTempDirectory("item-compare-");
            FileUtils.copyDirectory(resourceFiles.toFile(), tempDirectory.toFile());
            CompareReport compareReport = new CompareReport(tempDirectory);
            compareReport.setSummaryReportFileName(reportName);

            CompareUtil.createSummaryReport(compareReport, processedItems);

            log.info(tempDirectory.toString());

            processedItems.forEach(item -> {
                Assert.assertTrue(tempDirectory
                        .resolve(String.format("%s.csv", item.getItemId())).toFile().exists());
            });

            Assert.assertTrue(tempDirectory.resolve(reportName).toFile().exists());

        } catch (Exception ex) {
            log.error("Encountered error while running createSummaryReport test", ex);
        }
    }

    private File getFileFromResources(String resourcesLocation) {
        URL url = this.getClass().getClassLoader().getResource(resourcesLocation);
        File file;
        try {
            file = new File(url.toURI());
        } catch (URISyntaxException e) {
            file = new File(url.getPath());
        }
        return file;
    }
}
