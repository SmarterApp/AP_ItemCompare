package org.opentestsystem.ap.itemcompare.service;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.TemporaryFolder;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.saaif.SaaifAssembler;
import org.opentestsystem.ap.common.saaif.SaaifMetadataAssembler;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.metadata.SmarterAppMetadata;
import org.opentestsystem.ap.itemcompare.model.ItemComparison;
import org.opentestsystem.ap.itemcompare.util.GitLabApiClient;
import org.springframework.core.io.ClassPathResource;

import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class DefaultItemProviderTest {
    private static final String SourceItemDirectory = "Item-187-3467";

    @Rule
    public TemporaryFolder folder = new TemporaryFolder();

    @Rule
    public final ExpectedException thrown = ExpectedException.none();

    @Mock
    private AppAssembler appAssembler;

    @Mock
    private SaaifAssembler saaifAssembler;

    @Mock
    private SaaifMetadataAssembler metadataAssembler;

    @Mock
    private GitLabApiClient gitLabApiClient;

    @Mock
    private TemporaryDirectoryProvider temporaryDirectoryProvider;

    @InjectMocks
    private DefaultItemProvider itemProvider;

    @Before
    public void setup() throws Exception {
        when(temporaryDirectoryProvider.createTempDir(any()))
            .thenAnswer(invocationOnMock -> folder.newFolder().toPath());

        when(appAssembler.getSaaifAssembler()).thenReturn(saaifAssembler);

        when(saaifAssembler.getMetadataAssembler()).thenReturn(metadataAssembler);
        when(saaifAssembler.readXmlFromFile(any()))
            .thenReturn(mock(ItemRelease.class));

        final SmarterAppMetadata glossaryMetadata = mock(SmarterAppMetadata.class);
        when(glossaryMetadata.getInteractionType()).thenReturn("WIT");
        final SmarterAppMetadata itemMetadata = mock(SmarterAppMetadata.class);
        when(itemMetadata.getInteractionType()).thenReturn("EQ");
        when(metadataAssembler.readXmlFromFile(any()))
            .thenAnswer(invocation -> {
                final Path metaPath = invocation.getArgumentAt(0, Path.class)
                    .getParent();
                if (metaPath.endsWith(SourceItemDirectory)) {
                    return itemMetadata;
                }

                return glossaryMetadata;
            });

        final ClassPathResource itemResource = new ClassPathResource("item-200-183467.zip");
        when(gitLabApiClient.downloadItem(any(), any()))
            .thenAnswer(invocation -> {
                final Path destinationPath = invocation.getArgumentAt(1, Path.class)
                    .resolve("item-200-183467.zip");
                try (final InputStream itemStream = itemResource.getInputStream()) {
                    Files.copy(itemStream, destinationPath);
                }
                return destinationPath;
            });
    }

    @Test
    public void itShouldProvideAnItemComparison() {
        final ItemComparison itemComparison = itemProvider.getComparison("123");
        assertThat(itemComparison.getItemId()).isEqualTo("123");
        assertThat(itemComparison.getSource().getItemXml()).endsWith(Paths.get("item-187-3467.xml"));
        assertThat(itemComparison.getTest().getItemXml()).endsWith(Paths.get("item-200-183467.xml"));
    }

    @Test
    public void itShouldHandleAnEmptyItemId() {
        thrown.expect(IllegalArgumentException.class);
        thrown.expectMessage("Cannot download blank item id: [ ]");

        itemProvider.getComparison(" ");
    }

    @Test
    public void itShouldCleanUp() {
        final ItemComparison itemComparison = itemProvider.getComparison("123");
        assertThat(itemComparison.getTest().getItemXml()).exists();
        assertThat(itemComparison.getSource().getItemXml()).exists();

        itemProvider.cleanup(itemComparison);
        assertThat(itemComparison.getTest().getItemXml()).doesNotExist();
        assertThat(itemComparison.getSource().getItemXml()).doesNotExist();
        assertThat(itemComparison.getTest().getItemXml().getParent().getParent()).doesNotExist();
    }
}