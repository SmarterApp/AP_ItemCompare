package org.opentestsystem.ap.itemcompare.comparer.html.diff;

import org.jsoup.Jsoup;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.itemcompare.comparer.html.HtmlComparisonContext;
import org.opentestsystem.ap.itemcompare.comparer.html.comparison.HtmlComparison;
import org.opentestsystem.ap.itemcompare.model.ItemDifference;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.ap.itemcompare.comparer.html.diff.HtmlDifferenceProvider.DifferenceType.IMPORT_VALUE_NOT_FOUND;
import static org.opentestsystem.ap.itemcompare.comparer.html.diff.HtmlDifferenceProvider.DifferenceType.TEXT_DIFFERENCE;
import static org.opentestsystem.ap.itemcompare.comparer.html.diff.HtmlDifferenceProvider.DifferenceType.TIMS_VALUE_NOT_FOUND;

@RunWith(MockitoJUnitRunner.class)
public class TextHtmlDifferenceProviderTest {
    private static final String ComplexHtml = "<p>TEST: You <span id=\"item_183704_TAG_1\" class=\"its-tag\" data-tag=\"word\" data-tag-boundary=\"start\" data-word-index=\"1\"></span>would also like<span class=\"its-tag\" data-tag-ref=\"item_183704_TAG_1\" data-tag-boundary=\"end\"></span> your <span id=\"item_183704_TAG_2\" class=\"its-tag\" data-tag=\"word\" data-tag-boundary=\"start\" data-word-index=\"7\"></span>room<span class=\"its-tag\" data-tag-ref=\"item_183704_TAG_2\" data-tag-boundary=\"end\"></span> <span id=\"item_183704_TAG_3\" class=\"its-tag\" data-tag=\"word\" data-tag-boundary=\"start\" data-word-index=\"6\"></span>painted<span class=\"its-tag\" data-tag-ref=\"item_183704_TAG_3\" data-tag-boundary=\"end\"></span>.</p><p>Your <span id=\"item_183704_TAG_4\" class=\"its-tag\" data-tag=\"word\" data-tag-boundary=\"start\" data-word-index=\"7\"></span>room<span class=\"its-tag\" data-tag-ref=\"item_183704_TAG_4\" data-tag-boundary=\"end\"></span> has <span id=\"item_183704_TAG_1_BEGIN\">300</span> square feet of <span id=\"item_183704_TAG_5\" class=\"its-tag\" data-tag=\"word\" data-tag-boundary=\"start\" data-word-index=\"2\"></span>wall<span class=\"its-tag\" data-tag-ref=\"item_183704_TAG_5\" data-tag-boundary=\"end\"></span> <span id=\"item_183704_TAG_6\" class=\"its-tag\" data-tag=\"word\" data-tag-boundary=\"start\" data-word-index=\"3\"></span>space<span class=\"its-tag\" data-tag-ref=\"item_183704_TAG_6\" data-tag-boundary=\"end\"></span> <span id=\"item_183704_TAG_7\" class=\"its-tag\" data-tag=\"word\" data-tag-boundary=\"start\" data-word-index=\"8\"></span>to paint<span class=\"its-tag\" data-tag-ref=\"item_183704_TAG_7\" data-tag-boundary=\"end\"></span>.</p><p>Sam says <span id=\"item_183704_TAG_8\" class=\"its-tag\" data-tag=\"word\" data-tag-boundary=\"start\" data-word-index=\"4\"></span>it took<span class=\"its-tag\" data-tag-ref=\"item_183704_TAG_8\" data-tag-boundary=\"end\"></span> her 10 minutes <span id=\"item_183704_TAG_9\" class=\"its-tag\" data-tag=\"word\" data-tag-boundary=\"start\" data-word-index=\"8\"></span>to paint<span class=\"its-tag\" data-tag-ref=\"item_183704_TAG_9\" data-tag-boundary=\"end\"></span> 25 square feet.</p><br /><p><span style=\"letter-spacing:normal;\">At this rate, if Sam <span id=\"item_183704_TAG_10\" class=\"its-tag\" data-tag=\"word\" data-tag-boundary=\"start\" data-word-index=\"6\"></span>painted<span class=\"its-tag\" data-tag-ref=\"item_183704_TAG_10\" data-tag-boundary=\"end\"></span> your <span id=\"item_183704_TAG_11\" class=\"its-tag\" data-tag=\"word\" data-tag-boundary=\"start\" data-word-index=\"7\"></span>room<span class=\"its-tag\" data-tag-ref=\"item_183704_TAG_11\" data-tag-boundary=\"end\"></span>, how many </span><strong><span id=\"item_183704_TAG_2_BEGIN\"><span style=\"letter-spacing:normal;\">hours</span></span></strong><span style=\"letter-spacing:normal;\"> would it&#xA0;</span><span id=\"item_183704_TAG_1\" class=\"its-tag\" data-tag=\"word\" data-tag-boundary=\"start\" data-word-index=\"5\"></span><span id=\"item_183704_TAG_0_BEGIN\">take</span><span class=\"its-tag\" data-tag-ref=\"item_183704_TAG_1\" data-tag-boundary=\"end\"></span>?</p>";
    private static final String SimpleHtml = "<p>Some <b>simple <u>html</u></b>.</p>";
    private static final String SimpleText = "Some simple html.";

    @InjectMocks
    private TextHtmlDifferenceProvider provider;

    @Test
    public void itShouldNotReportADifferenceInComplexHtml() {
        final HtmlComparisonContext documents = documents(ComplexHtml, ComplexHtml);
        assertThat(provider.getDifferences(documents)).isEmpty();
    }

    @Test
    public void itShouldNotReportStyleDifferences() {
        final String sourceHtml = "<p>Some <span style=\"text-decoration:underline\">text</span> content.</p>";
        final String testHtml = "<p>Some <u>text</u> content.</p>";

        assertThat(provider.getDifferences(documents(sourceHtml, testHtml))).isEmpty();
    }

    @Test
    public void itShouldNotReportAnEmptyDifference() {
        assertThat(provider.getDifferences(documents(null, null))).isEmpty();
    }

    @Test
    public void itShouldReportMissingSourceText() {
        final HtmlComparisonContext documents = documents(null, SimpleHtml);
        final List<ItemDifference> differences = provider.getDifferences(documents);

        assertThat(differences).hasSize(1);
        final ItemDifference difference = differences.get(0);
        assertThat(difference.getDifferenceType()).isEqualTo(IMPORT_VALUE_NOT_FOUND.name());
        assertThat(difference.getFilename()).isEqualTo(documents.getFilename());
        assertThat(difference.getLocation()).isEqualTo(documents.getComparison().getLocation());
        assertThat(difference.getSourceValue()).isNull();
        assertThat(difference.getTestValue()).isEqualTo(SimpleText);
    }

    @Test
    public void itShouldReportMissingTestText() {
        final HtmlComparisonContext documents = documents(SimpleHtml, null);
        final List<ItemDifference> differences = provider.getDifferences(documents);

        assertThat(differences).hasSize(1);
        final ItemDifference difference = differences.get(0);
        assertThat(difference.getDifferenceType()).isEqualTo(TIMS_VALUE_NOT_FOUND.name());
        assertThat(difference.getFilename()).isEqualTo(documents.getFilename());
        assertThat(difference.getLocation()).isEqualTo(documents.getComparison().getLocation());
        assertThat(difference.getSourceValue()).isEqualTo(SimpleText);
        assertThat(difference.getTestValue()).isNull();
    }

    @Test
    public void itShouldReportATextDifference() {
        final String sourceHtml = "<p>Source <b>Value</b></p>";
        final String testHtml = "<p>Test <b>Value</b></p>";
        final HtmlComparisonContext documents = documents(sourceHtml, testHtml);
        final List<ItemDifference> differences = provider.getDifferences(documents);

        assertThat(differences).hasSize(1);
        final ItemDifference difference = differences.get(0);
        assertThat(difference.getDifferenceType()).isEqualTo(TEXT_DIFFERENCE.name());
        assertThat(difference.getFilename()).isEqualTo(documents.getFilename());
        assertThat(difference.getLocation()).isEqualTo(documents.getComparison().getLocation());
        assertThat(difference.getSourceValue()).isEqualTo("Source Value");
        assertThat(difference.getTestValue()).isEqualTo("Test Value");
    }

    @Test
    public void itShouldCollapseMultipleSpacesIncludingNonBreakingSpaces() {
        final String sourceHtml = "<p>Test\u00a0<b>Value</b></p>";
        final String testHtml = "<p>Test   <b>Value</b></p>";
        assertThat(provider.getDifferences(documents(sourceHtml, testHtml))).isEmpty();
    }

    private HtmlComparisonContext documents(final String sourceHtml, final String testHtml) {
        final HtmlComparison comparison = HtmlComparison.builder()
            .location("Somewhere")
            .sourceHtml(sourceHtml)
            .testHtml(testHtml)
            .build();
        return HtmlComparisonContext.builder()
            .comparison(comparison)
            .filename("filename.xml")
            .sourceDocument(sourceHtml == null ? null : Jsoup.parseBodyFragment(sourceHtml))
            .testDocument(testHtml == null ? null : Jsoup.parseBodyFragment(testHtml))
            .build();
    }
}