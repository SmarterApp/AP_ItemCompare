package org.opentestsystem.ap.itemcompare.comparer.html.diff.style;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Spy;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.itemcompare.comparer.html.HtmlComparisonContext;
import org.opentestsystem.ap.itemcompare.model.ItemDifference;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.ap.itemcompare.CompareModelSupport.htmlComparisonContext;

@RunWith(MockitoJUnitRunner.class)
public class StyleHtmlDifferenceProviderTest {

    @Spy
    private StyledTextSnippetParser snippetParser = new StyledTextSnippetParser();

    @InjectMocks
    private StyleHtmlDifferenceProvider provider;

    @Test
    public void itShouldNotDetectAStyleDifferenceWithIdenticalHtml() {
        final String sourceHtml = "<p>Some <span style=\"font-size: 14px;\"><u><i><strong>content</strong></i></u></span> <sup>goes</sup> <sub>here</sub>.</p>";
        final HtmlComparisonContext context = htmlComparisonContext(sourceHtml, sourceHtml);

        assertThat(provider.getDifferences(context)).isEmpty();
    }

    @Test
    public void itShouldNotDetectAStyleDifferenceWithContentChange() {
        final String sourceHtml = "<p>Some <strong>content</strong> goes here.</p>";
        final String testHtml = "<p>Some <strong>content 123</strong> goes here.</p>";
        final HtmlComparisonContext context = htmlComparisonContext(sourceHtml, testHtml);

        assertThat(provider.getDifferences(context)).isEmpty();
    }

    @Test
    public void itShouldNotDetectAStyleDifferenceWithMajorContentChange() {
        final String sourceHtml = "<p>Some sentence that should be removed. This <span style=\"font-size: 14px;\"><u><i><strong>content</strong></i></u></span> <sup>goes</sup> <sub>here</sub>.</p>";
        final String testHtml = "<p>This <span style=\"font-size: 14px;\"><u><i><strong>content</strong></i></u></span> <sup>goes</sup> <sub>here</sub>.</p>";
        final HtmlComparisonContext context = htmlComparisonContext(sourceHtml, testHtml);

        final List<ItemDifference> differences = provider.getDifferences(context);
        assertThat(differences).isEmpty();
    }

    @Test
    public void itShouldDetectABoldingRemovalDifference() {
        final String sourceHtml = "<p>Some <b>bolded</b> and <strong>bolded</strong> and <span style=\"font-weight: bold\">bolded</span> text</p>";
        final String testHtml = "<p>Some bolded and bolded and bolded text</p>";
        final HtmlComparisonContext context = htmlComparisonContext(sourceHtml, testHtml);

        final List<ItemDifference> differences = provider.getDifferences(context);
        assertThat(differences).hasSize(1);

        final ItemDifference difference = differences.get(0);
        assertThat(difference.getSourceValue()).isEqualTo("Some <BOLD>bolded</BOLD> and <BOLD>bolded</BOLD> and <BOLD>bolded</BOLD> text");
        assertThat(difference.getTestValue()).isEqualTo("Some bolded and bolded and bolded text");
    }

    @Test
    public void itShouldDetectABoldingAdditionDifference() {
        final String sourceHtml = "<p>Some bolded and bolded and bolded text</p>";
        final String testHtml = "<p>Some <b>bolded</b> and <strong>bolded</strong> and <span style=\"font-weight: bold\">bolded</span> text</p>";
        final HtmlComparisonContext context = htmlComparisonContext(sourceHtml, testHtml);

        final List<ItemDifference> differences = provider.getDifferences(context);
        assertThat(differences).hasSize(3);

        differences.forEach(difference -> {
            assertThat(difference.getSourceValue()).isEqualTo("Some bolded and bolded and bolded text");
            assertThat(difference.getTestValue()).isEqualTo("<BOLD>bolded</BOLD>");
        });
    }

    @Test
    public void itShouldDetectAnItalicRemovalDifference() {
        final String sourceHtml = "<p>Some <i>italic</i> and <em>italic</em> and <span style=\"font-style: italic\">italic</span> and <span style=\"font-style: oblique\">italic</span> text</p>";
        final String testHtml = "<p>Some italic and italic and italic and italic text</p>";
        final HtmlComparisonContext context = htmlComparisonContext(sourceHtml, testHtml);

        final List<ItemDifference> differences = provider.getDifferences(context);
        assertThat(differences).hasSize(1);

        final ItemDifference difference = differences.get(0);
        assertThat(difference.getSourceValue()).isEqualTo("Some <ITALIC>italic</ITALIC> and <ITALIC>italic</ITALIC> and <ITALIC>italic</ITALIC> and <ITALIC>italic</ITALIC> text");
        assertThat(difference.getTestValue()).isEqualTo("Some italic and italic and italic and italic text");
    }

    @Test
    public void itShouldDetectAnItalicAdditionDifference() {
        final String testHtml = "<p>Some <i>italic</i> and <em>italic</em> and <span style=\"font-style: italic\">italic</span> and <span style=\"font-style: oblique\">italic</span> text</p>";
        final String sourceHtml = "<p>Some italic and italic and italic and italic text</p>";
        final HtmlComparisonContext context = htmlComparisonContext(sourceHtml, testHtml);

        final List<ItemDifference> differences = provider.getDifferences(context);
        assertThat(differences).hasSize(4);

        differences.forEach(difference -> {
            assertThat(difference.getSourceValue()).isEqualTo("Some italic and italic and italic and italic text");
            assertThat(difference.getTestValue()).isEqualTo("<ITALIC>italic</ITALIC>");
        });
    }

    @Test
    public void itShouldDetectAnUnderlineRemovalDifference() {
        final String sourceHtml = "<p>Some <u>underline</u> and <span style=\"text-decoration: underline\">underline</span> text</p>";
        final String testHtml = "<p>Some underline and underline text</p>";
        final HtmlComparisonContext context = htmlComparisonContext(sourceHtml, testHtml);

        final List<ItemDifference> differences = provider.getDifferences(context);
        assertThat(differences).hasSize(1);

        final ItemDifference difference = differences.get(0);
        assertThat(difference.getSourceValue()).isEqualTo("Some <UNDERLINED>underline</UNDERLINED> and <UNDERLINED>underline</UNDERLINED> text");
        assertThat(difference.getTestValue()).isEqualTo("Some underline and underline text");
    }

    @Test
    public void itShouldDetectAnUnderlineAdditionDifference() {
        final String testHtml = "<p>Some <u>underline</u> and <span style=\"text-decoration: underline\">underline</span> text</p>";
        final String sourceHtml = "<p>Some underline and underline text</p>";
        final HtmlComparisonContext context = htmlComparisonContext(sourceHtml, testHtml);

        final List<ItemDifference> differences = provider.getDifferences(context);
        assertThat(differences).hasSize(2);

        differences.forEach(difference -> {
            assertThat(difference.getSourceValue()).isEqualTo("Some underline and underline text");
            assertThat(difference.getTestValue()).isEqualTo("<UNDERLINED>underline</UNDERLINED>");
        });
    }

    @Test
    public void itShouldDetectASuperscriptRemovalDifference() {
        final String sourceHtml = "<p>Some <sup>superscript</sup> text</p>";
        final String testHtml = "<p>Some superscript text</p>";
        final HtmlComparisonContext context = htmlComparisonContext(sourceHtml, testHtml);

        final List<ItemDifference> differences = provider.getDifferences(context);
        assertThat(differences).hasSize(1);

        final ItemDifference difference = differences.get(0);
        assertThat(difference.getSourceValue()).isEqualTo("Some <SUPERSCRIPT>superscript</SUPERSCRIPT> text");
        assertThat(difference.getTestValue()).isEqualTo("Some superscript text");
    }

    @Test
    public void itShouldDetectASuperscriptAdditionDifference() {
        final String testHtml = "<p>Some <sup>superscript</sup> text</p>";
        final String sourceHtml = "<p>Some superscript text</p>";
        final HtmlComparisonContext context = htmlComparisonContext(sourceHtml, testHtml);

        final List<ItemDifference> differences = provider.getDifferences(context);
        assertThat(differences).hasSize(1);

        differences.forEach(difference -> {
            assertThat(difference.getSourceValue()).isEqualTo("Some superscript text");
            assertThat(difference.getTestValue()).isEqualTo("<SUPERSCRIPT>superscript</SUPERSCRIPT>");
        });
    }

    @Test
    public void itShouldDetectASubscriptRemovalDifference() {
        final String sourceHtml = "<p>Some <sub>subscript</sub> text</p>";
        final String testHtml = "<p>Some subscript text</p>";
        final HtmlComparisonContext context = htmlComparisonContext(sourceHtml, testHtml);

        final List<ItemDifference> differences = provider.getDifferences(context);
        assertThat(differences).hasSize(1);

        final ItemDifference difference = differences.get(0);
        assertThat(difference.getSourceValue()).isEqualTo("Some <SUBSCRIPT>subscript</SUBSCRIPT> text");
        assertThat(difference.getTestValue()).isEqualTo("Some subscript text");
    }

    @Test
    public void itShouldDetectASubscriptAdditionDifference() {
        final String testHtml = "<p>Some <sub>subscript</sub> text</p>";
        final String sourceHtml = "<p>Some subscript text</p>";
        final HtmlComparisonContext context = htmlComparisonContext(sourceHtml, testHtml);

        final List<ItemDifference> differences = provider.getDifferences(context);
        assertThat(differences).hasSize(1);

        differences.forEach(difference -> {
            assertThat(difference.getSourceValue()).isEqualTo("Some subscript text");
            assertThat(difference.getTestValue()).isEqualTo("<SUBSCRIPT>subscript</SUBSCRIPT>");
        });
    }

    @Test
    public void itShouldDetectAFontSizeRemovalDifference() {
        final String sourceHtml = "<p>Some <span style=\"font-size: 14px\">font size</span> text</p>";
        final String testHtml = "<p>Some font size text</p>";
        final HtmlComparisonContext context = htmlComparisonContext(sourceHtml, testHtml);

        final List<ItemDifference> differences = provider.getDifferences(context);
        assertThat(differences).hasSize(1);

        final ItemDifference difference = differences.get(0);
        assertThat(difference.getSourceValue()).isEqualTo("Some <FONTSIZE:14px>font size</FONTSIZE:14px> text");
        assertThat(difference.getTestValue()).isEqualTo("Some font size text");
    }

    @Test
    public void itShouldDetectAFontSizeAdditionDifference() {
        final String testHtml = "<p>Some <span style=\"font-size: 14px\">font size</span> text</p>";
        final String sourceHtml = "<p>Some font size text</p>";
        final HtmlComparisonContext context = htmlComparisonContext(sourceHtml, testHtml);

        final List<ItemDifference> differences = provider.getDifferences(context);
        assertThat(differences).hasSize(1);

        differences.forEach(difference -> {
            assertThat(difference.getSourceValue()).isEqualTo("Some font size text");
            assertThat(difference.getTestValue()).isEqualTo("<FONTSIZE:14px>font size</FONTSIZE:14px>");
        });
    }

    @Test
    public void itShouldDetectAFontSizeChangeDifference() {
        final String sourceHtml = "<p>Some <span style=\"font-size: 1.2em\">font size</span> text</p>";
        final String testHtml = "<p>Some <span style=\"font-size: 14px\">font size</span> text</p>";
        final HtmlComparisonContext context = htmlComparisonContext(sourceHtml, testHtml);

        final List<ItemDifference> differences = provider.getDifferences(context);
        assertThat(differences).hasSize(1);

        differences.forEach(difference -> {
            assertThat(difference.getSourceValue()).isEqualTo("<FONTSIZE:1.2em>font size</FONTSIZE:1.2em>");
            assertThat(difference.getTestValue()).isEqualTo("<FONTSIZE:14px>font size</FONTSIZE:14px>");
        });
    }

    @Test
    public void itShouldDetectMultipleStyleChanges() {
        final String sourceHtml = "<p>Some <span style=\"font-size: 1.2em; text-decoration: underlined\"><em><sub>styled</sub></em></span> text</p>";
        final String testHtml = "<p>Some <span style=\"font-size: 14px\"><strong><sup>styled</sup></strong></span> text</p>";
        final HtmlComparisonContext context = htmlComparisonContext(sourceHtml, testHtml);

        final List<ItemDifference> differences = provider.getDifferences(context);
        assertThat(differences).hasSize(1);

        differences.forEach(difference -> {
            assertThat(difference.getSourceValue()).isEqualTo("<ITALIC,UNDERLINED,SUBSCRIPT,FONTSIZE:1.2em>styled</ITALIC,UNDERLINED,SUBSCRIPT,FONTSIZE:1.2em>");
            assertThat(difference.getTestValue()).isEqualTo("<BOLD,SUPERSCRIPT,FONTSIZE:14px>styled</BOLD,SUPERSCRIPT,FONTSIZE:14px>");
        });
    }

    @Test
    public void itShouldNotDetectChangesInOverlappingUnchangedStyles() {
        final String sourceHtml = "<p>Some <strong>bold and <em>italic</em></strong> text</p>";
        final HtmlComparisonContext context = htmlComparisonContext(sourceHtml, sourceHtml);

        assertThat(provider.getDifferences(context)).isEmpty();
    }

    @Test
    public void itShouldDetectChangesInOverlappingChangedStyles() {
        final String sourceHtml = "<p>Some <strong>bold and <em>italic</em></strong> text</p>";
        final String testHtml = "<p>Some <strong>bold and <u>italic</u></strong> text</p>";
        final HtmlComparisonContext context = htmlComparisonContext(sourceHtml, testHtml);

        final List<ItemDifference> differences = provider.getDifferences(context);
        assertThat(differences).hasSize(1);

        final ItemDifference difference = differences.get(0);
        assertThat(difference.getSourceValue()).isEqualTo("<BOLD,ITALIC>italic</BOLD,ITALIC>");
        assertThat(difference.getTestValue()).isEqualTo("<BOLD,UNDERLINED>italic</BOLD,UNDERLINED>");
    }

    @Test
    public void itShouldDetectWhenTheTextSnippetsHaveBeenRemoved() {
        final String sourceHtml = "<p>que compra como regalo.</p><table><thead><tr><th><p>Número de</p><p>Suscripciones</p></th><th>Costo total</th></tr></thead><tbody><tr><td>1</td><td>$16</td></tr><tr><td>2</td><td>$30</td></tr><tr><td>3</td><td>$42</td></tr><tr><td>4</td><td>$52</td></tr><tr><td>5</td><td>$60</td></tr></tbody></table><p>El costo total con respecto al número de suscripciones que compró se puede mostrar mediante una función. Selecciona la afirmación que describe correctamente el rango de la función.</p>";
        final String testHtml = "<p>Craig está comprando suscripciones a una revista. Él puede comprar hasta 5 copias de las suscripciones para regalarlas. La tabla da el costo total para Craig basándose en el número de suscripciones que compra como regalo.</p><p>El costo total con respecto al número de suscripciones que compró se puede mostrar mediante una función. Selecciona la afirmación que describe correctamente el rango de la función.</p>";

        final HtmlComparisonContext context = htmlComparisonContext(sourceHtml, testHtml);
        final List<ItemDifference> differences = provider.getDifferences(context);
    }
}