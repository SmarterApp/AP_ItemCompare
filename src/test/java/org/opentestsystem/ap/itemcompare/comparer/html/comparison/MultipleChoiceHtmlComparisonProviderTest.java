package org.opentestsystem.ap.itemcompare.comparer.html.comparison;

import org.assertj.core.api.Assertions;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;

public class MultipleChoiceHtmlComparisonProviderTest {
    private MultipleChoiceHtmlComparisonProvider provider;
    private ItemRelease.Item.Content sourceContent;
    private ItemRelease.Item.Content testContent;
    private ItemTypeHtmlComparisonContext context;

    @Before
    public void setUp() {
        provider = new MultipleChoiceHtmlComparisonProvider();
        sourceContent = new ItemRelease.Item.Content();
        sourceContent.setOptionlist(new ItemRelease.Item.Content.Optionlist());
        testContent = new ItemRelease.Item.Content();
        testContent.setOptionlist(new ItemRelease.Item.Content.Optionlist());
        context = new ItemTypeHtmlComparisonContext();
        context.setLanguage("Language");
    }

    @Test
    public void shouldIgnoreNonMultipleChoiceItems() {
        context.setItemType("ms");
        provider.appendComparisons(context, sourceContent, testContent);
        Assertions.assertThat(context.getComparisons()).isEmpty();
    }

    @Test
    public void shouldHandleEqualOptions() {
        context.setItemType("mc");
        ItemRelease.Item.Content.Optionlist.Option sourceOption = new ItemRelease.Item.Content.Optionlist.Option();
        ItemRelease.Item.Content.Optionlist.Option testOption = new ItemRelease.Item.Content.Optionlist.Option();

        sourceOption.setName("A");
        sourceOption.setVal("<p>test</p>");

        testOption.setName("A");
        testOption.setVal("<p>other test</p>  ");

        sourceContent.getOptionlist().getOption().add(sourceOption);
        testContent.getOptionlist().getOption().add(testOption);

        provider.appendComparisons(context, sourceContent, testContent);

        Assertions.assertThat(context.getComparisons()).hasSize(1);

        HtmlComparison comparison = context.getComparisons().get(0);
        Assertions.assertThat(comparison.getLocation()).isEqualTo("Option A");
        Assertions.assertThat(comparison.getSourceHtml().get()).isEqualTo("<p>test</p>");
        Assertions.assertThat(comparison.getTestHtml().get()).isEqualTo("<p>other test</p>");
    }

    @Test
    public void shouldHandleLargerSourceOptions() {
        context.setItemType("mc");
        ItemRelease.Item.Content.Optionlist.Option sourceOption = new ItemRelease.Item.Content.Optionlist.Option();
        ItemRelease.Item.Content.Optionlist.Option sourceOption2 = new ItemRelease.Item.Content.Optionlist.Option();
        ItemRelease.Item.Content.Optionlist.Option testOption = new ItemRelease.Item.Content.Optionlist.Option();

        sourceOption.setName("A");
        sourceOption.setVal("<p>test</p>");

        sourceOption2.setName("B");
        sourceOption2.setVal("<p>test 2</p>");

        testOption.setName("A");
        testOption.setVal("<p>other test</p>  ");

        sourceContent.getOptionlist().getOption().add(sourceOption);
        sourceContent.getOptionlist().getOption().add(sourceOption2);
        testContent.getOptionlist().getOption().add(testOption);

        provider.appendComparisons(context, sourceContent, testContent);

        Assertions.assertThat(context.getComparisons()).hasSize(2);

        HtmlComparison comparison = context.getComparisons().get(0);
        Assertions.assertThat(comparison.getLocation()).isEqualTo("Option A");
        Assertions.assertThat(comparison.getSourceHtml().get()).isEqualTo("<p>test</p>");
        Assertions.assertThat(comparison.getTestHtml().get()).isEqualTo("<p>other test</p>");

        comparison = context.getComparisons().get(1);
        Assertions.assertThat(comparison.getLocation()).isEqualTo("Option B");
        Assertions.assertThat(comparison.getSourceHtml().get()).isEqualTo("<p>test 2</p>");
        Assertions.assertThat(comparison.getTestHtml().isPresent()).isFalse();
    }

    @Test
    public void shouldHandleLargerTestOptions() {
        context.setItemType("mc");
        ItemRelease.Item.Content.Optionlist.Option sourceOption = new ItemRelease.Item.Content.Optionlist.Option();
        ItemRelease.Item.Content.Optionlist.Option testOption = new ItemRelease.Item.Content.Optionlist.Option();
        ItemRelease.Item.Content.Optionlist.Option testOption2 = new ItemRelease.Item.Content.Optionlist.Option();

        sourceOption.setName("A");
        sourceOption.setVal("<p>test</p>");

        testOption.setName("A");
        testOption.setVal("<p>other test</p>  ");

        testOption2.setName("B");
        testOption2.setVal("<p>other test 2</p>");

        sourceContent.getOptionlist().getOption().add(sourceOption);
        testContent.getOptionlist().getOption().add(testOption);
        testContent.getOptionlist().getOption().add(testOption2);

        provider.appendComparisons(context, sourceContent, testContent);

        Assertions.assertThat(context.getComparisons()).hasSize(2);

        HtmlComparison comparison = context.getComparisons().get(0);
        Assertions.assertThat(comparison.getLocation()).isEqualTo("Option A");
        Assertions.assertThat(comparison.getSourceHtml().get()).isEqualTo("<p>test</p>");
        Assertions.assertThat(comparison.getTestHtml().get()).isEqualTo("<p>other test</p>");

        comparison = context.getComparisons().get(1);
        Assertions.assertThat(comparison.getLocation()).isEqualTo("Option B");
        Assertions.assertThat(comparison.getSourceHtml().isPresent()).isFalse();
        Assertions.assertThat(comparison.getTestHtml().get()).isEqualTo("<p>other test 2</p>");
    }
}
