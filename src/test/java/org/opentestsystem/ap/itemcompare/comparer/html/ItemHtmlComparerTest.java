package org.opentestsystem.ap.itemcompare.comparer.html;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.itemcompare.comparer.html.comparison.HtmlComparison;
import org.opentestsystem.ap.itemcompare.comparer.html.comparison.HtmlComparisonProvider;
import org.opentestsystem.ap.itemcompare.comparer.html.diff.HtmlDifferenceProvider;
import org.opentestsystem.ap.itemcompare.model.ItemComparison;
import org.opentestsystem.ap.itemcompare.model.ItemDifference;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

import static java.util.Collections.emptyList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.itemcompare.CompareModelSupport.itemComparison;
import static org.opentestsystem.ap.itemcompare.CompareModelSupport.itemDifference;
import static org.opentestsystem.ap.itemcompare.comparer.html.diff.HtmlDifferenceProvider.DifferenceType.TEXT_DIFFERENCE;

@RunWith(MockitoJUnitRunner.class)
public class ItemHtmlComparerTest {

    @Mock
    private HtmlComparisonProvider comparisonProvider;

    @Mock
    private HtmlDifferenceProvider differenceProviderA;

    @Mock
    private HtmlDifferenceProvider differenceProviderB;

    @Spy
    private Set<HtmlDifferenceProvider> differenceProviders = new HashSet<>();

    @InjectMocks
    private ItemHtmlComparer comparer;

    @Before
    public void setup() {
        differenceProviders.addAll(ImmutableSet.of(differenceProviderA, differenceProviderB));
    }

    @Test
    public void itShouldCompareHtmlOnItems() {
        final ItemComparison itemComparison = itemComparison("123");
        final HtmlComparison htmlComparisonA = htmlComparison("A");
        final HtmlComparison htmlComparisonB = htmlComparison("B");
        when(comparisonProvider.getComparisons(itemComparison)).thenReturn(ImmutableList.of(htmlComparisonA, htmlComparisonB));

        final ItemDifference itemDifferenceA = itemDifference(TEXT_DIFFERENCE.name());
        when(differenceProviderA.getDifferences(any())).thenAnswer(invocation -> {
            final HtmlComparisonContext context = invocation.getArgumentAt(0, HtmlComparisonContext.class);
            if (context.getComparison() == htmlComparisonA) {
                return ImmutableList.of(itemDifferenceA);
            }
            return emptyList();
        });

        final ItemDifference itemDifferenceB = itemDifference(TEXT_DIFFERENCE.name());
        when(differenceProviderB.getDifferences(any())).thenAnswer(invocation -> {
            final HtmlComparisonContext context = invocation.getArgumentAt(0, HtmlComparisonContext.class);
            if (context.getComparison() == htmlComparisonB) {
                return ImmutableList.of(itemDifferenceB);
            }
            return emptyList();
        });

        assertThat(comparer.compare(itemComparison)).containsOnly(itemDifferenceA, itemDifferenceB);
    }

    @Test
    public void itShouldHandleMissingSourceHtml() {
        final ItemComparison itemComparison = itemComparison("123");
        final HtmlComparison htmlComparison = HtmlComparison.builder()
            .location("Location")
            .testHtml("<p>Test Html<p>")
            .build();
        when(comparisonProvider.getComparisons(itemComparison)).thenReturn(ImmutableList.of(htmlComparison));

        when(differenceProviderA.getDifferences(any())).thenAnswer(invocation -> {
            final HtmlComparisonContext context = invocation.getArgumentAt(0, HtmlComparisonContext.class);
            assertThat(context.getSourceDocument().isPresent()).isFalse();
            assertThat(context.getTestDocument().isPresent()).isTrue();
            return Collections.emptyList();
        });

        assertThat(comparer.compare(itemComparison)).isEmpty();
    }

    @Test
    public void itShouldHandleMissingTestHtml() {
        final ItemComparison itemComparison = itemComparison("123");
        final HtmlComparison htmlComparison = HtmlComparison.builder()
            .location("Location")
            .sourceHtml("<p>Source Html<p>")
            .build();
        when(comparisonProvider.getComparisons(itemComparison)).thenReturn(ImmutableList.of(htmlComparison));

        when(differenceProviderA.getDifferences(any())).thenAnswer(invocation -> {
            final HtmlComparisonContext context = invocation.getArgumentAt(0, HtmlComparisonContext.class);
            assertThat(context.getSourceDocument().isPresent()).isTrue();
            assertThat(context.getTestDocument().isPresent()).isFalse();
            return Collections.emptyList();
        });

        assertThat(comparer.compare(itemComparison)).isEmpty();
    }

    @Test
    public void itShouldHandleInvalidHtml() {
        final ItemComparison itemComparison = itemComparison("123");
        final HtmlComparison htmlComparison = HtmlComparison.builder()
            .location("Location")
            .sourceHtml("<p>Some <spin>bad</spin> <@#$>tags</@#$></p>")
            .testHtml("<p>Some <spin<p<p<p>bad</spin> <!->tags</@#$><")
            .build();
        when(comparisonProvider.getComparisons(itemComparison)).thenReturn(ImmutableList.of(htmlComparison));

        when(differenceProviderA.getDifferences(any())).thenAnswer(invocation -> {
            final HtmlComparisonContext context = invocation.getArgumentAt(0, HtmlComparisonContext.class);
            assertThat(context.getSourceDocument().isPresent()).isTrue();
            assertThat(context.getSourceDocument().get().text()).isNotEmpty();

            assertThat(context.getTestDocument().isPresent()).isTrue();
            assertThat(context.getTestDocument().get().text()).isNotEmpty();
            return Collections.emptyList();
        });

        assertThat(comparer.compare(itemComparison)).isEmpty();
    }

    private HtmlComparison htmlComparison(final String id) {
        return HtmlComparison.builder()
            .location("Location " + id)
            .sourceHtml("<p>Source Html " + id + "</p>")
            .testHtml("<p>Test Html " + id + "<p>")
            .build();
    }
}