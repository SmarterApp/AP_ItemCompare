package org.opentestsystem.ap.itemcompare.comparer.html.comparison;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class GeneralItemTypeHtmlComparisonProviderTest {

    private ItemTypeHtmlComparisonContext context;

    @InjectMocks
    private GeneralItemTypeHtmlComparisonProvider provider;

    @Before
    public void setup() {
        context = new ItemTypeHtmlComparisonContext();
        context.setLanguage("Language");
        context.setItemType("mc");
    }

    @Test
    public void itShouldProvideAStemHtmlComparison() {
        final ItemRelease.Item.Content sourceContent = mockContent(1);
        final ItemRelease.Item.Content testContent = mockContent(2);

        provider.appendComparisons(context, sourceContent, testContent);
        assertThat(context.getComparisons()).hasSize(1);

        final HtmlComparison comparison = context.getComparisons().get(0);
        assertThat(comparison.getLocation()).isEqualTo("Language Prompt");
        assertThat(comparison.getSourceHtml().orElse("")).isEqualTo("stem 1");
        assertThat(comparison.getTestHtml().orElse("")).isEqualTo("stem 2");
    }

    @Test
    public void itShouldHandleMissingSourceContent() {
        final ItemRelease.Item.Content testContent = mockContent(2);

        provider.appendComparisons(context, null, testContent);
        assertThat(context.getComparisons()).hasSize(1);

        final HtmlComparison comparison = context.getComparisons().get(0);
        assertThat(comparison.getLocation()).isEqualTo("Language Prompt");
        assertThat(comparison.getSourceHtml().isPresent()).isFalse();
        assertThat(comparison.getTestHtml().orElse("")).isEqualTo("stem 2");
    }

    @Test
    public void itShouldHandleMissingTestContent() {
        final ItemRelease.Item.Content sourceContent = mockContent(1);

        provider.appendComparisons(context, sourceContent, null);
        assertThat(context.getComparisons()).hasSize(1);

        final HtmlComparison comparison = context.getComparisons().get(0);
        assertThat(comparison.getLocation()).isEqualTo("Language Prompt");
        assertThat(comparison.getSourceHtml().orElse("")).isEqualTo("stem 1");
        assertThat(comparison.getTestHtml().isPresent()).isFalse();
    }

    private ItemRelease.Item.Content mockContent(final int id) {
        final ItemRelease.Item.Content content = mock(ItemRelease.Item.Content.class);
        when(content.getStem()).thenReturn("stem " + id);
        return content;
    }
}