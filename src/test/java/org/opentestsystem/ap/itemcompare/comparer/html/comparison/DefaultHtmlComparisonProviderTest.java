package org.opentestsystem.ap.itemcompare.comparer.html.comparison;

import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.itemcompare.CompareModelSupport;
import org.opentestsystem.ap.itemcompare.model.ItemComparison;

import java.util.HashSet;
import java.util.Set;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Fail.fail;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

@RunWith(MockitoJUnitRunner.class)
public class DefaultHtmlComparisonProviderTest {

    @Mock
    private ItemTypeHtmlComparisonProvider typeProviderA;

    @Mock
    private ItemTypeHtmlComparisonProvider typeProviderB;

    @Spy
    private Set<ItemTypeHtmlComparisonProvider> typeProviders = new HashSet<>();

    @InjectMocks
    private DefaultHtmlComparisonProvider provider;

    @Before
    public void setup() {
        typeProviders.addAll(ImmutableSet.of(typeProviderA, typeProviderB));
    }

    @Test
    public void itShouldCallTypeProvidersWithItemRelease() {
        final ItemComparison itemComparison = CompareModelSupport.itemComparison("123");

        provider.getComparisons(itemComparison);

        verify(typeProviderA).appendComparisons(
            any(),
            eq(itemComparison.getSource().getItemRelease()),
            eq(itemComparison.getTest().getItemRelease()));
        verify(typeProviderB).appendComparisons(
            any(),
            eq(itemComparison.getSource().getItemRelease()),
            eq(itemComparison.getTest().getItemRelease()));
    }

    @Test
    public void itShouldCallTypeProvidersWithItem() {
        final ItemComparison itemComparison = CompareModelSupport.itemComparison("123");
        final ItemRelease.Item sourceItem = itemComparison.getSource().getItemRelease().getItem();
        final ItemRelease.Item testItem = itemComparison.getTest().getItemRelease().getItem();

        provider.getComparisons(itemComparison);

        final ArgumentCaptor<ItemTypeHtmlComparisonContext> contextCaptor = ArgumentCaptor.forClass(ItemTypeHtmlComparisonContext.class);
        verify(typeProviderA).appendComparisons(
            contextCaptor.capture(),
            eq(sourceItem),
            eq(testItem));
        verify(typeProviderB).appendComparisons(
            any(),
            eq(sourceItem),
            eq(testItem));

        final ItemTypeHtmlComparisonContext context = contextCaptor.getValue();
        assertThat(context.getItemType().isPresent()).isTrue();
        assertThat(context.getItemType().get()).isEqualTo(sourceItem.getFormat());
    }

    @Test
    public void itShouldCallTypeProvidersAllLanguageContent() {
        final ItemComparison itemComparison = CompareModelSupport.itemComparison("123");

        doAnswer(invocation -> {
            final ItemTypeHtmlComparisonContext context = invocation.getArgumentAt(0, ItemTypeHtmlComparisonContext.class);
            final ItemRelease.Item.Content sourceContent = invocation.getArgumentAt(1, ItemRelease.Item.Content.class);
            final ItemRelease.Item.Content testContent = invocation.getArgumentAt(2, ItemRelease.Item.Content.class);

            assertThat(sourceContent.getLanguage()).isEqualTo(testContent.getLanguage());
            if ("English".equals(context.getLanguage().get())) {
                assertThat(sourceContent.getLanguage()).isEqualTo("ENU");
            } else if ("Spanish".equals(context.getLanguage().get())) {
                assertThat(sourceContent.getLanguage()).isEqualTo("ESN");
            } else {
                fail("Unknown language: " + context.getLanguage().get());
            }

            return null;
        }).when(typeProviderA).appendComparisons(any(), any(ItemRelease.Item.Content.class), any(ItemRelease.Item.Content.class));

        provider.getComparisons(itemComparison);

        verify(typeProviderA, times(2)).appendComparisons(any(), any(ItemRelease.Item.Content.class), any());
        verify(typeProviderB, times(2)).appendComparisons(any(), any(ItemRelease.Item.Content.class), any());
    }

}