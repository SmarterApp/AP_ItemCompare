package org.opentestsystem.ap.itemcompare.comparer.xml;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.itemcompare.model.ItemComparison;
import org.opentestsystem.ap.itemcompare.model.ItemDifference;
import org.opentestsystem.ap.itemcompare.model.ItemReference;
import org.springframework.core.io.ClassPathResource;

import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;

import static java.util.Collections.emptyList;
import static java.util.Collections.singletonList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.ap.itemcompare.CompareModelSupport.releaseWithResources;
import static org.opentestsystem.ap.itemcompare.comparer.xml.ItemXmlComparer.NAME;

@RunWith(MockitoJUnitRunner.class)
public class ItemXmlComparerTest {

    @InjectMocks
    private ItemXmlComparer xmlComparer;

    @Test
    public void itShouldAdvertiseItsName() {
        assertThat(xmlComparer.getName()).isEqualTo(NAME);
    }

    @Test
    public void itShouldAdvertiseDifferenceTypes() {
        assertThat(xmlComparer.getDifferenceTypes()).isNotEmpty();
    }

    @Test
    public void itShouldPerformAnItemComparisonWithResources() throws Exception {
        final ItemComparison itemComparison = ItemComparison.builder()
            .itemId("183704")
            .source(sourceWithResources())
            .test(testWithResources())
            .build();

        final List<ItemDifference> differences = xmlComparer.compare(itemComparison);
        assertThat(differences.stream()
            .map(ItemDifference::getFilename)
            .collect(Collectors.toSet()))
            .containsExactlyInAnyOrder("item-200-183704.xml", "Item_183704_v11.eax", "Item_183704_v11.qrx");
    }

    @Test
    public void itShouldPerformAnItemComparisonWithMismatchedResources() throws Exception {
        final ItemReference sourceReference = sourceWithResources();
        final ItemRelease.Item sourceItem = sourceReference.getItemRelease().getItem();
        when(sourceItem.getRendererSpec()).thenReturn(emptyList());

        final ItemReference testReference = testWithResources();
        final ItemRelease.Item testItem = testReference.getItemRelease().getItem();
        when(testItem.getMachineRubric()).thenReturn(emptyList());

        final ItemComparison itemComparison = ItemComparison.builder()
            .itemId("183704")
            .source(sourceReference)
            .test(testReference)
            .build();

        final List<ItemDifference> differences = xmlComparer.compare(itemComparison);
        assertThat(differences.stream()
            .map(ItemDifference::getFilename)
            .collect(Collectors.toSet()))
            .containsExactlyInAnyOrder("item-200-183704.xml");
    }

    @Test
    public void itShouldPerformAnItemComparisonWithMissingResources() throws Exception {
        final ItemReference sourceReference = sourceWithResources();
        final ItemRelease.Item sourceItem = sourceReference.getItemRelease().getItem();
        final ItemRelease.Item.RendererSpec badRendererSpec = mock(ItemRelease.Item.RendererSpec.class);
        when(badRendererSpec.getFilename()).thenReturn("missing-spec.eax");
        when(sourceItem.getRendererSpec()).thenReturn(singletonList(badRendererSpec));

        final ItemReference testReference = testWithResources();
        final ItemRelease.Item testItem = testReference.getItemRelease().getItem();
        final ItemRelease.Item.MachineRubric badRubric = mock(ItemRelease.Item.MachineRubric.class);
        when(badRubric.getFilename()).thenReturn("missing-rubric.qrx");
        when(testItem.getMachineRubric()).thenReturn(singletonList(badRubric));

        final ItemComparison itemComparison = ItemComparison.builder()
            .itemId("183704")
            .source(sourceReference)
            .test(testReference)
            .build();

        final List<ItemDifference> differences = xmlComparer.compare(itemComparison);
        assertThat(differences.stream()
            .map(ItemDifference::getFilename)
            .collect(Collectors.toSet()))
            .containsExactlyInAnyOrder("item-200-183704.xml", "missing-spec.eax", "missing-rubric.qrx");
    }

    private ItemReference testWithResources() throws IOException {
        final ClassPathResource resource = new ClassPathResource("items/test/item-200-183704.xml");
        return ItemReference.builder()
            .itemRelease(releaseWithResources())
            .itemXml(resource.getFile().toPath())
            .build();
    }

    private ItemReference sourceWithResources() throws IOException {
        final ClassPathResource resource = new ClassPathResource("items/source/item-200-183704.xml");
        return ItemReference.builder()
            .itemRelease(releaseWithResources())
            .itemXml(resource.getFile().toPath())
            .build();
    }

}