package org.opentestsystem.ap.itemcompare;

import freemarker.template.Configuration;
import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.config.FreemarkerConfig;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.model.JsonModelAssembler;
import org.opentestsystem.ap.common.saaif.SaaifAssembler;
import org.opentestsystem.ap.common.saaif.SaaifMetadataAssembler;
import org.opentestsystem.ap.common.saaif.SaaifWordListAssembler;
import org.opentestsystem.ap.common.saaif.StringAssembler;
import org.opentestsystem.ap.common.saaif.transformer.TransformerFactory;
import org.opentestsystem.ap.itemcompare.util.GitLabApiClient;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Import;

@Slf4j
@org.springframework.context.annotation.Configuration
@Import({FreemarkerConfig.class})
@EnableConfigurationProperties({ItemBankProperties.class})
@ConditionalOnProperty(value = "itembank.test.enabled", havingValue = "false", matchIfMissing = true)
public class ItemCompareConfiguration {

    private final ApplicationProperties applicationProperties;

    private final freemarker.template.Configuration freemarker;

    public ItemCompareConfiguration(final ApplicationProperties applicationProperties,
                                    final Configuration freemarker) {
        this.applicationProperties = applicationProperties;
        this.freemarker = freemarker;
    }

    @Bean
    public GitLabApiClient gitLabApiClient(final RestTemplateBuilder restTemplateBuilder) {
        return new GitLabApiClient(this.applicationProperties, restTemplateBuilder);
    }

    @Bean
    @ConditionalOnMissingBean
    public JsonModelAssembler jsonModelAssembler() {
        return new JsonModelAssembler();
    }


    @Bean
    @ConditionalOnMissingBean
    public StringAssembler stringAssembler() {
        return new StringAssembler(this.freemarker);
    }

    @Bean
    @ConditionalOnMissingBean
    public SaaifAssembler saaifAssembler() {
        return new SaaifAssembler(saaifMetadataAssembler(), saaifWordListAssembler());
    }

    @Bean
    @ConditionalOnMissingBean
    public SaaifMetadataAssembler saaifMetadataAssembler() {
        return new SaaifMetadataAssembler();
    }

    @Bean
    @ConditionalOnMissingBean
    public SaaifWordListAssembler saaifWordListAssembler() {
        return new SaaifWordListAssembler();
    }


    @Bean
    @ConditionalOnMissingBean
    public AppAssembler appAssembler() {
        log.info("Creating bean appAssembler");
        return new AppAssembler(saaifAssembler(), jsonModelAssembler(), stringAssembler());
    }

    @Bean
    @ConditionalOnMissingBean
    public TransformerFactory transformerFactory() {
        return new TransformerFactory(null);
    }

}
