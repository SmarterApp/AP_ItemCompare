package org.opentestsystem.ap.itemcompare.comparer.html.comparison;

import com.google.common.base.Functions;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Sets;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.tuple.Triple;
import org.eclipse.jgit.util.StringUtils;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.itemcompare.model.ItemComparison;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import static org.apache.commons.lang3.StringUtils.isNotBlank;

/**
 * Default item-type-aware html comparison provider.
 */
@Component
@Slf4j
class DefaultHtmlComparisonProvider implements HtmlComparisonProvider {
    private static final Map<String, String> LanguageDisplayMap = ImmutableMap.of(
        "enu", "English",
        "esn", "Spanish"
    );

    private final Set<ItemTypeHtmlComparisonProvider> itemTypeProviders;

    @Autowired
    public DefaultHtmlComparisonProvider(final Set<ItemTypeHtmlComparisonProvider> itemTypeProviders) {
        this.itemTypeProviders = itemTypeProviders;
    }

    @Override
    public List<HtmlComparison> getComparisons(final ItemComparison itemComparison) {
        final ItemTypeHtmlComparisonContext context = new ItemTypeHtmlComparisonContext();

        final ItemRelease sourceRelease = itemComparison.getSource().getItemRelease();
        final ItemRelease testRelease = itemComparison.getTest().getItemRelease();

        updatePassageComparisons(context, sourceRelease.getItem(), testRelease.getItem());
        updatePassageComparisons(context, sourceRelease.getPassage(), testRelease.getPassage());

        return context.getComparisons();
    }

    private void updatePassageComparisons(ItemTypeHtmlComparisonContext context, ItemRelease.Item sourceItem, ItemRelease.Item testItem) {
        if (sourceItem == null && testItem == null) return;

        context.setItemType(getFormat(sourceItem, testItem));

        getContentByLanguage(sourceItem, testItem).forEach(triple -> {
            context.setLanguage(triple.getLeft());
            itemTypeProviders.forEach(provider -> provider.appendComparisons(context, triple.getMiddle(), triple.getRight()));
        });
    }

    private void updatePassageComparisons(ItemTypeHtmlComparisonContext context, ItemRelease.Passage sourcePassage, ItemRelease.Passage testPassage) {
        if (sourcePassage == null && testPassage == null) return;

        context.setItemType(getFormat(sourcePassage, testPassage));

        getContentByLanguage(sourcePassage, testPassage).forEach(triple -> {
            context.setLanguage(triple.getLeft());
            itemTypeProviders.forEach(provider -> provider.appendComparisons(context, triple.getMiddle(), triple.getRight()));
        });
    }

    private String getFormat(final ItemRelease.Item sourceItem, final ItemRelease.Item testItem) {
        if (testItem != null && isNotBlank(testItem.getFormat())) return testItem.getFormat();
        if (sourceItem != null && isNotBlank(sourceItem.getFormat())) return sourceItem.getFormat();
        return "UNKNOWN";
    }

    private String getFormat(final ItemRelease.Passage sourceItem, final ItemRelease.Passage testItem) {
        if (testItem != null && isNotBlank(testItem.getFormat())) return testItem.getFormat();
        if (sourceItem != null && isNotBlank(sourceItem.getFormat())) return sourceItem.getFormat();
        return "UNKNOWN";
    }

    private List<Triple<String, ItemRelease.Item.Content, ItemRelease.Item.Content>> getContentByLanguage(final ItemRelease.Item sourceItem, final ItemRelease.Item testItem) {
        final Map<String, ItemRelease.Item.Content> sourceContentByLanguage = getItemContentByLanguage(sourceItem);
        final Map<String, ItemRelease.Item.Content> testContentByLanguage = getItemContentByLanguage(testItem);

        return Sets.union(sourceContentByLanguage.keySet(), testContentByLanguage.keySet()).stream()
            .map(language -> Triple.of(language, sourceContentByLanguage.get(language), testContentByLanguage.get(language)))
            .collect(Collectors.toList());
    }

    private List<Triple<String, ItemRelease.Passage.Content, ItemRelease.Passage.Content>> getContentByLanguage(final ItemRelease.Passage sourcePassage, final ItemRelease.Passage testPassage) {
        final Map<String, ItemRelease.Passage.Content> sourceContentByLanguage = getPassageContentByLanguage(sourcePassage);
        final Map<String, ItemRelease.Passage.Content> testContentByLanguage = getPassageContentByLanguage(testPassage);

        return Sets.union(sourceContentByLanguage.keySet(), testContentByLanguage.keySet()).stream()
            .map(language -> Triple.of(language, sourceContentByLanguage.get(language), testContentByLanguage.get(language)))
            .collect(Collectors.toList());
    }

    private Map<String, ItemRelease.Item.Content> getItemContentByLanguage(final ItemRelease.Item item) {
        if (item == null || item.getContent() == null) return Collections.emptyMap();

        return item.getContent().stream()
            .collect(Collectors.toMap(
                this::getLanguage,
                Functions.identity()
            ));
    }

    private Map<String, ItemRelease.Passage.Content> getPassageContentByLanguage(final ItemRelease.Passage passage) {
        if (passage == null || passage.getContent() == null) return Collections.emptyMap();

        return passage.getContent().stream()
            .collect(Collectors.toMap(
                this::getLanguage,
                Functions.identity()
            ));
    }

    private String getLanguage(final ItemRelease.Item.Content content) {
        return LanguageDisplayMap.getOrDefault(StringUtils.toLowerCase(content.getLanguage()), content.getLanguage());
    }

    private String getLanguage(final ItemRelease.Passage.Content content) {
        return LanguageDisplayMap.getOrDefault(StringUtils.toLowerCase(content.getLanguage()), content.getLanguage());
    }
}
