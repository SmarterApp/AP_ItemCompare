package org.opentestsystem.ap.itemcompare.comparer.html.comparison;

import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.item.ItemRelease.Item.Content.Optionlist.Option;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;

import static org.apache.commons.lang3.StringUtils.isBlank;
import static org.apache.commons.lang3.StringUtils.trimToEmpty;

@Component
class MultipleChoiceHtmlComparisonProvider implements ItemTypeHtmlComparisonProvider {
    @Override
    public void appendComparisons(final ItemTypeHtmlComparisonContext context, final ItemRelease.Item.Content sourceContent, final ItemRelease.Item.Content testContent) {
        if(!ModelConstants.ItemType.TYPE_MC.equals(context.getItemType())) {
            return;
        }

        if(sourceContent == null || testContent == null) {
            return;
        }

        appendOptions(context, sourceContent.getOptionlist().getOption(), testContent.getOptionlist().getOption());
    }

    private void appendOptions(final ItemTypeHtmlComparisonContext context, final List<Option> sourceItemOptions, final List<Option> testItemOptions) {
        for (int i = 0; i < sourceItemOptions.size(); i++) {
            Option sourceOption = sourceItemOptions.get(i);
            String testOptionHtml = testItemOptions.size() <= i ? null : trimToEmpty(testItemOptions.get(i).getVal());
            String sourceOptionHtml = trimToEmpty(sourceOption.getVal());
            if (isBlank(sourceOptionHtml) && isBlank(testOptionHtml)) continue;

            context.getComparisons().add(HtmlComparison.builder()
                    .location("Option " + sourceOption.getName())
                    .sourceHtml(sourceOptionHtml)
                    .testHtml(testOptionHtml)
                    .build());
        }

        //Handle the case where the test item has more options than the source item
        if(testItemOptions.size() > sourceItemOptions.size()) {
            for (int i = sourceItemOptions.size(); i < testItemOptions.size(); i++) {
                Option testOption = testItemOptions.get(i);
                context.getComparisons().add(HtmlComparison.builder()
                        .location("Option " + testOption.getName())
                        .sourceHtml(null)
                        .testHtml(testOption.getVal())
                        .build());
            }
        }
    }

    private List<Option> getOptions(ItemRelease.Item.Content content) {
        if(content.getOptionlist() == null || content.getOptionlist().getOption() == null) {
            return new ArrayList<>();
        }

        return content.getOptionlist().getOption();
    }
}
