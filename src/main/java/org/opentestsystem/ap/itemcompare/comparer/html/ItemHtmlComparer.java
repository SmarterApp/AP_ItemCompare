package org.opentestsystem.ap.itemcompare.comparer.html;

import lombok.extern.slf4j.Slf4j;
import org.jsoup.Jsoup;
import org.opentestsystem.ap.itemcompare.comparer.ItemComparer;
import org.opentestsystem.ap.itemcompare.comparer.html.comparison.HtmlComparison;
import org.opentestsystem.ap.itemcompare.comparer.html.comparison.HtmlComparisonProvider;
import org.opentestsystem.ap.itemcompare.comparer.html.diff.HtmlDifferenceProvider;
import org.opentestsystem.ap.itemcompare.model.ItemComparison;
import org.opentestsystem.ap.itemcompare.model.ItemDifference;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * This comparer performs an HTML comparison on the given items' html text values.
 */
@Service
@Slf4j
class ItemHtmlComparer implements ItemComparer {
    static final String NAME = "html";

    private final HtmlComparisonProvider htmlComparisonProvider;
    private final Set<HtmlDifferenceProvider> differenceProviders;

    @Autowired
    public ItemHtmlComparer(final HtmlComparisonProvider htmlComparisonProvider,
                            final Set<HtmlDifferenceProvider> differenceProviders) {
        this.htmlComparisonProvider = htmlComparisonProvider;
        this.differenceProviders = differenceProviders;
    }

    @Override
    public String getName() {
        return NAME;
    }

    @Override
    public List<String> getDifferenceTypes() {
        return Arrays.stream(HtmlDifferenceProvider.DifferenceType.values())
            .map(HtmlDifferenceProvider.DifferenceType::name)
            .collect(Collectors.toList());
    }

    @Override
    public List<ItemDifference> compare(final ItemComparison itemComparison) {
        return htmlComparisonProvider.getComparisons(itemComparison).stream()
            .map(parseDocuments(itemComparison))
            .flatMap(getHtmlDifferences())
            .collect(Collectors.toList());
    }

    private Function<HtmlComparison, HtmlComparisonContext> parseDocuments(final ItemComparison itemComparison) {
        return htmlComparison -> {
            final HtmlComparisonContext.HtmlComparisonContextBuilder builder = HtmlComparisonContext.builder()
                .comparison(htmlComparison)
                .filename(itemComparison.getTest().getItemXml().toFile().getName());

            if (htmlComparison.getSourceHtml().isPresent()) {
                builder.sourceDocument(Jsoup.parseBodyFragment(htmlComparison.getSourceHtml().get()));
            }

            if (htmlComparison.getTestHtml().isPresent()) {
                builder.testDocument(Jsoup.parseBodyFragment(htmlComparison.getTestHtml().get()));
            }

            return builder.build();
        };
    }

    private Function<HtmlComparisonContext, Stream<ItemDifference>> getHtmlDifferences() {
        return comparisonDocuments -> differenceProviders.stream()
            .flatMap(provider -> provider.getDifferences(comparisonDocuments).stream());
    }
}
