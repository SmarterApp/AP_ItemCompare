package org.opentestsystem.ap.itemcompare.comparer.html.diff;

import org.jsoup.nodes.Document;
import org.opentestsystem.ap.itemcompare.comparer.html.HtmlComparisonContext;
import org.opentestsystem.ap.itemcompare.model.ItemDifference;
import org.springframework.stereotype.Component;

import java.util.Collections;
import java.util.List;

/**
 * This difference provider is responsible for reporting
 * un-styled text differences between the source and test html.
 *
 * NOTE: This provider also reports on missing source or test HTML.
 */
@Component
class TextHtmlDifferenceProvider implements HtmlDifferenceProvider {

    @Override
    public List<ItemDifference> getDifferences(final HtmlComparisonContext comparisonDocuments) {
        if (!comparisonDocuments.getSourceDocument().isPresent() && !comparisonDocuments.getTestDocument().isPresent()) {
            // No documents to compare
            return Collections.emptyList();
        }

        final ItemDifference.ItemDifferenceBuilder builder = ItemDifference.builder()
            .filename(comparisonDocuments.getFilename())
            .location(comparisonDocuments.getComparison().getLocation());

        if (!comparisonDocuments.getSourceDocument().isPresent()) {
            return Collections.singletonList(builder
                .differenceType(DifferenceType.IMPORT_VALUE_NOT_FOUND.name())
                .testValue(getText(comparisonDocuments.getTestDocument().get()))
                .build());
        }

        if (!comparisonDocuments.getTestDocument().isPresent()) {
            return Collections.singletonList(builder
                .differenceType(DifferenceType.TIMS_VALUE_NOT_FOUND.name())
                .sourceValue(getText(comparisonDocuments.getSourceDocument().get()))
                .build());
        }

        final String sourceText = getText(comparisonDocuments.getSourceDocument().get());
        final String testText = getText(comparisonDocuments.getTestDocument().get());
        if (sourceText.equals(testText)) return Collections.emptyList();

        return Collections.singletonList(builder
            .differenceType(DifferenceType.TEXT_DIFFERENCE.name())
            .sourceValue(sourceText)
            .testValue(testText)
            .build());
    }

    private String getText(final Document document) {
        return document.text()
            .replaceAll("[\\s\\u00A0]+", " "); //Collapse whitespace including &nbsp;
    }
}
