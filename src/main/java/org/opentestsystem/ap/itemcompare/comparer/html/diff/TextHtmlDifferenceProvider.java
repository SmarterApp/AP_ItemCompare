package org.opentestsystem.ap.itemcompare.comparer.html.diff;

import com.github.difflib.algorithm.DiffException;
import com.github.difflib.text.DiffRow;
import com.github.difflib.text.DiffRowGenerator;
import com.google.common.collect.ImmutableList;
import org.jsoup.nodes.Document;
import org.opentestsystem.ap.itemcompare.comparer.html.HtmlComparisonContext;
import org.opentestsystem.ap.itemcompare.model.ItemDifference;
import org.springframework.stereotype.Component;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import static org.opentestsystem.ap.itemcompare.comparer.html.diff.HtmlDifferenceProvider.DifferenceType.TEXT_DIFFERENCE;

/**
 * This difference provider is responsible for reporting
 * un-styled text differences between the source and test html.
 *
 * NOTE: This provider also reports on missing source or test HTML.
 */
@Component
class TextHtmlDifferenceProvider implements HtmlDifferenceProvider {

    @Override
    public List<ItemDifference> getDifferences(final HtmlComparisonContext comparisonDocuments) {
        if (!comparisonDocuments.getSourceDocument().isPresent() && !comparisonDocuments.getTestDocument().isPresent()) {
            // No documents to compare
            return Collections.emptyList();
        }

        final ItemDifference.ItemDifferenceBuilder builder = ItemDifference.builder()
            .filename(comparisonDocuments.getFilename())
            .location(comparisonDocuments.getComparison().getLocation());

        if (!comparisonDocuments.getSourceDocument().isPresent()) {
            return Collections.singletonList(builder
                .differenceType(DifferenceType.IMPORT_VALUE_NOT_FOUND.name())
                .testValue(getText(comparisonDocuments.getTestDocument().get()))
                .build());
        }

        if (!comparisonDocuments.getTestDocument().isPresent()) {
            return Collections.singletonList(builder
                .differenceType(DifferenceType.TIMS_VALUE_NOT_FOUND.name())
                .sourceValue(getText(comparisonDocuments.getSourceDocument().get()))
                .build());
        }

        final String sourceText = getText(comparisonDocuments.getSourceDocument().get());
        final String testText = getText(comparisonDocuments.getTestDocument().get());
        try {
            return DiffRowGenerator.create()
                .showInlineDiffs(true)
                .inlineDiffByWord(true)
                .ignoreWhiteSpaces(true)
                .newTag(f -> f ? "<NEW>" : "</NEW>")
                .oldTag(f -> f ? "<OLD>" : "</OLD>")
                .build()
                .generateDiffRows(ImmutableList.of(sourceText), ImmutableList.of(testText))
                .stream()
                .filter(diffRow -> DiffRow.Tag.EQUAL != diffRow.getTag())
                .map(diffRow -> builder
                    .differenceType(TEXT_DIFFERENCE.name())
                    .sourceValue(diffRow.getOldLine())
                    .testValue(diffRow.getNewLine())
                    .build())
                .collect(Collectors.toList());
        } catch (final DiffException e) {
            throw new IllegalStateException("Unable to compute HTML text difference", e);
        }
    }

    private String getText(final Document document) {
        return document.text()
            .replaceAll("[\\s\\u00A0]+", " "); //Collapse whitespace including &nbsp;
    }
}
