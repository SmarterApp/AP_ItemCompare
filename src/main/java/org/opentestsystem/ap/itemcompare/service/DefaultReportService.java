package org.opentestsystem.ap.itemcompare.service;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.itemcompare.ApplicationProperties;
import org.opentestsystem.ap.itemcompare.comparer.ItemComparer;
import org.opentestsystem.ap.itemcompare.report.CsvItemReportWriter;
import org.opentestsystem.ap.itemcompare.report.CsvSummaryReportWriter;
import org.opentestsystem.ap.itemcompare.report.ReportWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * Default implementation of a ReportService, providing CSV-based report writers.
 */
@Service
@Slf4j
class DefaultReportService implements ReportService {

    private final ApplicationProperties applicationProperties;

    @Autowired
    public DefaultReportService(final ApplicationProperties applicationProperties) {
        this.applicationProperties = applicationProperties;
    }

    @Override
    public ReportWriter getSummaryReportWriter(final String reportName, final Set<ItemComparer> itemComparers) {
        final Path summaryReport = getReportDirectory(reportName)
            .resolve("summary.csv");

        final List<String> differenceTypes = itemComparers.stream()
            .flatMap(itemComparer -> itemComparer.getDifferenceTypes().stream())
            .collect(Collectors.toList());

        return new CsvSummaryReportWriter(summaryReport, differenceTypes);
    }

    @Override
    public ReportWriter getItemReportWriter(final String reportName, final String itemId) {
        final Path itemReport = getReportDirectory(reportName)
            .resolve(itemId + ".csv");
        return new CsvItemReportWriter(itemReport);
    }

    private Path getReportDirectory(final String reportName) {
        final Path reportDirectory = Paths.get(applicationProperties.getReportBaseDir())
            .resolve(reportName);
        if (Files.isDirectory(reportDirectory)) {
            return reportDirectory;
        }
        try {
            Files.createDirectories(reportDirectory);
        } catch (final IOException e) {
            throw new IllegalArgumentException("Unable to create report directory [" + reportDirectory.toString() + "]", e);
        }
        return reportDirectory;
    }
}
