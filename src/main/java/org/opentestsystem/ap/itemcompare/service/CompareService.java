package org.opentestsystem.ap.itemcompare.service;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.ToString;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FilenameUtils;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.repository.RepositoryUtil;
import org.opentestsystem.ap.common.saaif.util.MigrationFileUtil;
import org.opentestsystem.ap.common.util.ZipUtil;
import org.opentestsystem.ap.itemcompare.ApplicationProperties;
import org.opentestsystem.ap.itemcompare.util.CompareUtil;
import org.opentestsystem.ap.itemcompare.util.GitLabApiClient;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Repository;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import java.util.stream.Collectors;

@Slf4j
@Component
public class CompareService {

    private final GitLabApiClient gitLabApiClient;

    private final ApplicationProperties applicationProperties;

    private final ItemBankProperties itemBankProperties;

    public CompareService(GitLabApiClient gitLabApiClient,
                          ApplicationProperties applicationProperties,
                          ItemBankProperties itemBankProperties) {
        this.gitLabApiClient = gitLabApiClient;
        this.applicationProperties = applicationProperties;
        this.itemBankProperties = itemBankProperties;
    }

    public void compare() {
        final List<String> includedItems = Arrays.asList(applicationProperties.getItemId());

        final List<CompareContext> results = includedItems
                .stream()
                .map(initializeCompare())
                .map(downloadSourceItemArchive())
                .map(unzipSourceItemArchive())
                .map(unzipImportArchive())
                .map(deleteFiles())
                .map(completeCompare())
                .collect(Collectors.toList());

        log.info("Compared items from {} group {}",
                this.itemBankProperties.getHost(),
                this.itemBankProperties.getGroup());

        results.forEach(r -> log.info("\t{}", r.getMessage()));
    }

    private Function<String, CompareContext> initializeCompare() {
        return itemId -> {
            CompareContext compareContext = new CompareContext(itemId);
            if (CompareUtil.isImported(itemId)) {
                compareContext.setItemBaseDir(CompareUtil
                        .generateItemPath(compareContext.getItemId(), itemBankProperties.getLocalBaseDir()));
            } else {
                String msg = String.format("Item %s is not imported, unable to run comparison.", itemId);
                log.error(msg);
                compareContext.setFailed(true);
                compareContext.setFailedMessage(msg);
            }
            return compareContext;
        };
    }

    private Function<CompareContext, CompareContext> downloadSourceItemArchive() {
        return compareContext -> {
            if (compareContext.isNotFailed()) {
                try {
                    final Path archiveFile = this.gitLabApiClient
                            .downloadItem(compareContext.getItemId(), compareContext.getItemBaseDir());
                    final String legacyId = FilenameUtils.removeExtension(archiveFile.toFile().getName());
                    compareContext
                            .setArchiveFile(archiveFile)
                            .setLegacyId(legacyId);
                } catch (Exception e) {
                    log.error(e.getMessage(), e);
                    compareContext.setFailed(true);
                    compareContext.setFailedMessage(e.getMessage());
                }
            }
            return compareContext;
        };
    }

    private Function<CompareContext, CompareContext> unzipSourceItemArchive() {
        return compareContext -> {
            if (compareContext.isNotFailed()) {
                try {
                    compareContext.setCurrentItemDir(compareContext.getItemBaseDir().resolve(compareContext.getLegacyId()));

                    // the zip files contain a directory so all contents unzip into one automatically
                    // for example: //localBaseDir/item-200-123793-master-b9a0bc1890cddd14339b56f79673a6fd76e34a2e
                    ZipUtil.unzip(compareContext.getArchiveFile(), compareContext.getItemBaseDir());

                    Files.list(compareContext.getItemBaseDir())
                            .map(Path::toFile)
                            .filter(File::isDirectory)
                            .filter(directory -> directory.getName().startsWith(compareContext.getLegacyId()))
                            .forEach(directory -> directory.renameTo(compareContext.getCurrentItemDir().toFile()));

                } catch (Exception e) {
                    log.error(e.getMessage(), e);
                    compareContext.setFailedMessage(e.getMessage());
                }
            }
            return compareContext;
        };
    }

    private Function<CompareContext, CompareContext> unzipImportArchive() {
        return compareContext -> {
            if (compareContext.isNotFailed()) {
                CompareUtil.unzipFile(compareContext.getCurrentItemDir().resolve("import.zip").toString(),
                        compareContext.getItemBaseDir().resolve("import").toString());
            }
            return compareContext;
        };
    }

    private Function<CompareContext, CompareContext> deleteFiles() {
        return copyContext -> {
            if (copyContext.isNotFailed()) {
                RepositoryUtil.deleteDirectory(copyContext.itemBaseDir);
            }
            return copyContext;
        };
    }

    private Function<CompareContext, CompareContext> completeCompare() {
        return copyContext -> {
            if (copyContext.isNotFailed()) {
                copyContext.setMessage(
                        String.format("Success: %s, %s", copyContext.getItemId(), copyContext.getLegacyId())
                );
            }
            return copyContext;
        };
    }

    @Getter
    @ToString
    @RequiredArgsConstructor
    public static class CompareContext {

        private final String itemId;

        private String legacyId;

        // the downloaded zip file on disk
        private Path archiveFile;

        // the path to the unzipped contents
//        private Path sourceRepo;

        //
        private Path itemBaseDir;


        // the path to the current item contents
        private Path currentItemDir;



        private String message;

        private boolean failed;

        public CompareContext setLegacyId(String legacyId) {
            this.legacyId = legacyId;
            return this;
        }

        public CompareContext setArchiveFile(Path archiveFile) {
            this.archiveFile = archiveFile;
            return this;
        }

//        public CompareContext setSourceRepo(Path sourceRepo) {
//            this.sourceRepo = sourceRepo;
//            return this;
//        }

        public CompareContext setItemBaseDir(Path itemBaseDir) {
            this.itemBaseDir = itemBaseDir;
            return this;
        }


        public CompareContext setCurrentItemDir(Path expandedItemDir) {
            this.currentItemDir = expandedItemDir;
            return this;
        }


        public CompareContext setMessage(String message) {
            this.message = message;
            return this;
        }

        public CompareContext setFailedMessage(String message) {
            this.failed = true;
            this.message = "Failed: " + message;
            return this;
        }

        public CompareContext setFailed(boolean failed) {
            this.failed = failed;
            return this;
        }

        public boolean isNotFailed() {
            return !this.failed;
        }
    }

}
