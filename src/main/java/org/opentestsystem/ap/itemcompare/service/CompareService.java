package org.opentestsystem.ap.itemcompare.service;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FilenameUtils;
import org.opentestsystem.ap.common.assembler.AppAssembler;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.model.Item;
import org.opentestsystem.ap.common.repository.RepositoryUtil;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;
import org.opentestsystem.ap.common.saaif.mapper.util.MigrationFileUtil;
import org.opentestsystem.ap.common.util.ZipUtil;
import org.opentestsystem.ap.itemcompare.ApplicationProperties;
import org.opentestsystem.ap.itemcompare.model.FileCompareInfo;
import org.opentestsystem.ap.itemcompare.report.CompareReport;
import org.opentestsystem.ap.itemcompare.report.CompareReportFile;
import org.opentestsystem.ap.itemcompare.util.CompareUtil;
import org.opentestsystem.ap.itemcompare.util.GitLabApiClient;
import org.springframework.stereotype.Component;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
 * Downloads items provided in input file
 * Extracts import.zip
 * Compares several files
 * Writes compare results to file
 */
@Slf4j
@Component
public class CompareService {

    private final GitLabApiClient gitLabApiClient;

    private final ApplicationProperties applicationProperties;

    private final ItemBankProperties itemBankProperties;

    private final AppAssembler appAssembler;

    private final String IMPORT_DIRECTORY = "import";

    private final String IMPORT_ZIP_FILENAME = "import.zip";

    private final String METADATA_FILENAME = "metadata.xml";

    public CompareService(GitLabApiClient gitLabApiClient,
                          ApplicationProperties applicationProperties,
                          ItemBankProperties itemBankProperties,
                          AppAssembler appAssembler) {
        this.gitLabApiClient = gitLabApiClient;
        this.applicationProperties = applicationProperties;
        this.itemBankProperties = itemBankProperties;
        this.appAssembler = appAssembler;
    }

    public void compare() {
        log.info("Comparing items from {} group {}",
                this.itemBankProperties.getHost(),
                this.itemBankProperties.getGroup());

        final List<String> includedItems = CompareUtil
                .fileToCollection(applicationProperties.getCompareIdFileName());

        CompareReport compareReport = new CompareReport(applicationProperties.getReportBaseDir());

        final List<CompareContext> results = includedItems
                .stream()
                .map(validateCompare())
                .map(initializeCompare())
                .map(downloadSourceItemArchive())
                .map(unzipSourceArchive())
                .map(unzipImportArchive())
                .map(setFilesToCompare())
                .map(compareFiles(compareReport))
//                .map(deleteFiles())
                .map(completeCompare())
                .collect(Collectors.toList());

        results.forEach(r -> log.info("\t{}", r.getMessage()));
    }

    private Function<String, CompareContext> validateCompare() {
        return itemId -> {
            CompareContext compareContext = new CompareContext(itemId);
            if (!CompareUtil.isImported(itemId)) {
                String msg = String.format("Item %s is not imported, unable to run comparison.", itemId);
                log.error(msg);
                compareContext.setFailed(true);
                compareContext.setFailedMessage(msg);
            }
            return compareContext;
        };
    }

    private Function<CompareContext, CompareContext> initializeCompare() {
        return compareContext -> {
            compareContext.setItemBaseDir(CompareUtil
                    .createLocalRandomPath(applicationProperties.getTempBaseDir()));
            return compareContext;
        };
    }

    private Function<CompareContext, CompareContext> downloadSourceItemArchive() {
        return compareContext -> {
            if (compareContext.isNotFailed()) {
                try {
                    final Path archiveFile = this.gitLabApiClient
                            .downloadItem(compareContext.getItemId(), compareContext.getItemBaseDir());
                    final String legacyId = FilenameUtils.removeExtension(archiveFile.toFile().getName());

                    compareContext
                            .setArchiveFile(archiveFile)
                            .setDirectoryName(legacyId);

                } catch (Exception e) {
                    log.error(e.getMessage(), e);
                    compareContext.setFailed(true);
                    compareContext.setFailedMessage(e.getMessage());
                }
            }
            return compareContext;
        };
    }

    private Function<CompareContext, CompareContext> unzipSourceArchive() {
        return compareContext -> {
            if (compareContext.isNotFailed()) {
                try {
                    compareContext.setCurrentItemDir(compareContext.getItemBaseDir().resolve(compareContext.getDirectoryName()));
                    // the zip files contain a directory so all contents unzip into one automatically
                    // for example: //localBaseDir/item-200-123793-master-b9a0bc1890cddd14339b56f79673a6fd76e34a2e
                    ZipUtil.unzip(compareContext.getArchiveFile(),
                            compareContext.getItemBaseDir());

                    Files.list(compareContext.getItemBaseDir())
                            .map(Path::toFile)
                            .filter(File::isDirectory)
                            .filter(directory -> directory.getName().startsWith(compareContext.getDirectoryName()))
                            .forEach(directory -> directory.renameTo(compareContext.getCurrentItemDir().toFile()));

                } catch (Exception e) {
                    log.error(e.getMessage(), e);
                    compareContext.setFailedMessage(e.getMessage());
                }
            }
            return compareContext;
        };
    }

    private Function<CompareContext, CompareContext> unzipImportArchive() {
        return compareContext -> {
            if (compareContext.isNotFailed()) {
                Path importedItemDir = compareContext.getItemBaseDir().resolve(IMPORT_DIRECTORY);
                ZipUtil.unzip(compareContext.getCurrentItemDir().resolve(IMPORT_ZIP_FILENAME),
                        importedItemDir);

                compareContext.setImportedItemDir(importedItemDir);
            }
            return compareContext;
        };
    }

    private Function<CompareContext, CompareContext> setFilesToCompare() {
        return compareContext -> {
            if (compareContext.isNotFailed()) {
                // Get item directory within expanded import.zip content
                Path importedSourceDir = MigrationFileUtil
                        .getItemSourceDir(compareContext.importedItemDir, compareContext.itemId);

                String timsJsonFileName = "item.json";

                Item item = this.appAssembler.getJsonModelAssembler()
                        .readItem(compareContext.currentItemDir.resolve(timsJsonFileName));

                String timsXmlFileName = String.format("%s.xml", compareContext.getDirectoryName());
                String importedXmlFileName = timsXmlFileName
                        .replace(compareContext.itemId, item.getItsId());

                ItemRelease timsRelease = this.appAssembler.getSaaifAssembler()
                        .readXmlFromFile(compareContext.currentItemDir.resolve(timsXmlFileName));
                ItemRelease importedRelease = this.appAssembler.getSaaifAssembler()
                        .readXmlFromFile(importedSourceDir.resolve(importedXmlFileName));

                // Set main item files to compare
                compareContext.fileCompareInfoList.add(new FileCompareInfo(
                        timsXmlFileName,
                        importedSourceDir.resolve(importedXmlFileName).toFile(),
                        compareContext.currentItemDir.resolve(timsXmlFileName).toFile()));

                // Set metadata files to compare
                compareContext.fileCompareInfoList.add(new FileCompareInfo(
                        METADATA_FILENAME,
                        importedSourceDir.resolve(METADATA_FILENAME).toFile(),
                        compareContext.currentItemDir.resolve(METADATA_FILENAME).toFile()));

                addFileReferencesToCompare(importedSourceDir, compareContext, timsRelease, importedRelease);
            }
            return compareContext;
        };
    }

    private Function<CompareContext, CompareContext> compareFiles(CompareReport compareReport) {
        return compareContext -> {
            if (compareContext.isNotFailed()) {

                CompareReportFile compareReportFile = new CompareReportFile(compareReport,
                        compareContext.getItemId());

                for (FileCompareInfo fileCompareInfo : compareContext.getFileCompareInfoList()) {
                    CompareUtil.compareAndWriteResults(compareContext.getItemId(), fileCompareInfo, compareReportFile);
                }
            }

            return compareContext;
        };
    }

    private Function<CompareContext, CompareContext> deleteFiles() {
        return compareContext -> {
            if (compareContext.isNotFailed()) {
                RepositoryUtil.deleteDirectory(compareContext.itemBaseDir);
            }
            return compareContext;
        };
    }

    private Function<CompareContext, CompareContext> completeCompare() {
        return copyContext -> {
            if (copyContext.isNotFailed()) {
                copyContext.setMessage(
                        String.format("Success: %s, %s", copyContext.getItemId(), copyContext.getDirectoryName())
                );
            }
            return copyContext;
        };
    }

    private static void addFileReferencesToCompare(Path importedSourceDir,
                                                   CompareContext compareContext,
                                                   ItemRelease timsRelease,
                                                   ItemRelease importedRelease) {
        if (Objects.nonNull(timsRelease.getItem())
                && Objects.nonNull(importedRelease.getItem())) {
            if (timsRelease.getItem().getMachineRubric().size() == 1
                    && importedRelease.getItem().getMachineRubric().size() == 1) {
                String timsMachineRubric = timsRelease.getItem().getMachineRubric().get(0).getFilename().replace("//", "");
                String importedMachineRubric = importedRelease.getItem().getMachineRubric().get(0).getFilename().replace("//", "");

                compareContext.fileCompareInfoList.add(new FileCompareInfo(
                        timsMachineRubric,
                        importedSourceDir.resolve(importedMachineRubric).toFile(),
                        compareContext.currentItemDir.resolve(timsMachineRubric).toFile()));
            }

            if (timsRelease.getItem().getRendererSpec().size() == 1
                    && importedRelease.getItem().getRendererSpec().size() == 1) {
                String timsRenderSpec = timsRelease.getItem().getRendererSpec().get(0).getFilename().replace("//", "");
                String importedRenderSpec = importedRelease.getItem().getRendererSpec().get(0).getFilename().replace("//", "");

                compareContext.fileCompareInfoList.add(new FileCompareInfo(
                        timsRenderSpec,
                        importedSourceDir.resolve(importedRenderSpec).toFile(),
                        compareContext.currentItemDir.resolve(timsRenderSpec).toFile()));
            }
        }
    }

    @Getter
    @RequiredArgsConstructor
    public static class CompareContext {

        private final String itemId;

        private String legacyId;

        private String directoryName;

        // the downloaded zip file on disk
        private Path archiveFile;

        // the path where all files will get extracted to
        private Path itemBaseDir;

        // the path to the current item contents
        private Path currentItemDir;

        // the path to the imported item contents
        private Path importedItemDir;

        private String message;

        private boolean failed;

        private List<FileCompareInfo> fileCompareInfoList = new ArrayList<>();

        CompareContext setLegacyId(String legacyId) {
            this.legacyId = legacyId;
            return  this;
        }


        CompareContext setDirectoryName(String directoryName) {
            this.directoryName = directoryName;
            return this;
        }

        CompareContext setArchiveFile(Path archiveFile) {
            this.archiveFile = archiveFile;
            return this;
        }

        CompareContext setItemBaseDir(Path itemBaseDir) {
            this.itemBaseDir = itemBaseDir;
            return this;
        }

        CompareContext setCurrentItemDir(Path expandedItemDir) {
            this.currentItemDir = expandedItemDir;
            return this;
        }

        CompareContext setImportedItemDir(Path importedItemDir) {
            this.importedItemDir = importedItemDir;
            return this;
        }


        CompareContext setMessage(String message) {
            this.message = message;
            return this;
        }

        CompareContext setFailedMessage(String message) {
            this.failed = true;
            this.message = "Failed: " + message;
            return this;
        }

        CompareContext setFailed(boolean failed) {
            this.failed = failed;
            return this;
        }

        boolean isNotFailed() {
            return !this.failed;
        }
    }

}
