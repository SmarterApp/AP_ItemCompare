package org.opentestsystem.ap.itemcompare.service;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.ToString;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FilenameUtils;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.repository.RepositoryUtil;
import org.opentestsystem.ap.common.util.ZipUtil;
import org.opentestsystem.ap.itemcompare.ApplicationProperties;
import org.opentestsystem.ap.itemcompare.util.GitLabApiClient;
import org.springframework.stereotype.Component;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import java.util.stream.Collectors;

@Slf4j
@Component
public class CompareService {

    private final GitLabApiClient gitLabApiClient;

    private final ApplicationProperties applicationProperties;

    private final Path localBaseDir;

    public CompareService(GitLabApiClient gitLabApiClient,
                          ApplicationProperties applicationProperties,
                          ItemBankProperties itemBankProperties) {
        this.gitLabApiClient = gitLabApiClient;
        this.applicationProperties = applicationProperties;

        this.localBaseDir = Paths.get(itemBankProperties.getLocalBaseDir());
    }

    public void compare() {
        final List<String> includedItems = Arrays.asList(applicationProperties.getItemId());

        final List<CopyContext> results = includedItems
                .stream()
                .map(initializeCompare())
                .map(downloadSourceItemArchive())
                .map(unzipSourceItemArchive())
                .collect(Collectors.toList());

    }

    private Function<String, CopyContext> initializeCompare() {
        return itemId -> {
            CopyContext copyContext = new CopyContext(itemId);
            return copyContext;
        };
    }

    private Function<CopyContext, CopyContext> downloadSourceItemArchive() {
        return copyContext -> {
            if (copyContext.isNotFailed()) {
                try {
                    final Path archiveFile = this.gitLabApiClient.downloadItem(copyContext.getItemId());
                    final String legacyId = FilenameUtils.removeExtension(archiveFile.toFile().getName());
                    copyContext.setArchiveFile(archiveFile).setLegacyId(legacyId);
                } catch (Exception e) {
                    log.error(e.getMessage(), e);
                    copyContext.setFailedMessage(e.getMessage());
                }
            }
            return copyContext;
        };
    }

    private Function<CopyContext, CopyContext> unzipSourceItemArchive() {
        return copyContext -> {
            if (copyContext.isNotFailed()) {
                try {
                    copyContext.setSourceRepo(this.localBaseDir.resolve(copyContext.getLegacyId()));

                    RepositoryUtil.deleteDirectory(copyContext.getSourceRepo());

                    // the zip files contain a directory so all contents unzip into one automatically
                    // for example: //localBaseDir/item-200-123793-master-b9a0bc1890cddd14339b56f79673a6fd76e34a2e
                    ZipUtil.unzip(copyContext.getArchiveFile(), this.localBaseDir);

                    Files.list(this.localBaseDir)
                            .map(Path::toFile)
                            .filter(File::isDirectory)
                            .filter(directory -> directory.getName().startsWith(copyContext.getLegacyId()))
                            .forEach(directory -> directory.renameTo(copyContext.getSourceRepo().toFile()));
                } catch (Exception e) {
                    log.error(e.getMessage(), e);
                    copyContext.setFailedMessage(e.getMessage());
                }
            }
            return copyContext;
        };
    }

    @Getter
    @ToString
    @RequiredArgsConstructor
    public static class CopyContext {

        private final String itemId;

        private String legacyId;

        // the zip file on disk
        private Path archiveFile;

        // the path to the unzipped contents
        private Path sourceRepo;

        private String message;

        private boolean failed;

        public CopyContext setLegacyId(String legacyId) {
            this.legacyId = legacyId;
            return this;
        }

        public CopyContext setArchiveFile(Path archiveFile) {
            this.archiveFile = archiveFile;
            return this;
        }

        public CopyContext setSourceRepo(Path sourceRepo) {
            this.sourceRepo = sourceRepo;
            return this;
        }

        public CopyContext setMessage(String message) {
            this.message = message;
            return this;
        }

        public CopyContext setFailedMessage(String message) {
            this.failed = true;
            this.message = "Failed: " + message;
            return this;
        }

        public CopyContext setFailed(boolean failed) {
            this.failed = failed;
            return this;
        }

        public boolean isNotFailed() {
            return !this.failed;
        }
    }

}
