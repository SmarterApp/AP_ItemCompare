package org.opentestsystem.ap.itemcompare.util;

import org.eclipse.jgit.util.StringUtils;
import org.opentestsystem.ap.common.model.ModelConstants;
import org.opentestsystem.ap.common.saaif.item.ItemRelease;

import java.util.Optional;

import static org.opentestsystem.ap.common.model.ModelConstants.ItemType.TYPE_STIM;

/**
 * Utility that understands how to parse the ItemRelease formats supported by Smarter
 */
public class ItemTypeParser {
    private static final String HTQ_ITEM_PREFIX = "ht";
    private static final String SA_IMPORT_TYPE = "er";

    /**
     * Gets the item format from the test release, then source, then UNKNOWN if not found
     *
     * @param sourceRelease the source data
     * @param testRelease   the test data
     * @return format if found otherwise UNKNOWN
     */
    public static String getItemFormat(final ItemRelease sourceRelease, final ItemRelease testRelease) {
        Optional<String> format = ItemTypeParser.getFormatFromRelease(testRelease);
        if (!format.isPresent()) {
            format = ItemTypeParser.getFormatFromRelease(sourceRelease);
        }

        return format.orElse("UNKNOWN");
    }

    /**
     * Retrieves the Item Format from the release
     *
     * @param itemRelease the {@link ItemRelease}
     * @return the format if it can be found otherwise empty
     */
    public static Optional<String> getFormatFromRelease(final ItemRelease itemRelease) {
        if (itemRelease == null) {
            return Optional.empty();
        }

        if (itemRelease.getItem() == null && itemRelease.getPassage() == null) {
            return Optional.empty();
        } else if (itemRelease.getPassage() != null) {
            //Passages are always stims and do not need special processing.
            return Optional.of(TYPE_STIM);
        }

        String format = itemRelease.getItem().getFormat();

        if (format.startsWith(HTQ_ITEM_PREFIX)) {
            String htqItemType = getIatHtqType(itemRelease);
            format = !StringUtils.isEmptyOrNull(htqItemType) ? htqItemType : format;
        } else if (SA_IMPORT_TYPE.equalsIgnoreCase(format)) {
            format = ModelConstants.ItemType.TYPE_SA;
        }

        return Optional.of(format);
    }

    private static String getIatHtqType(ItemRelease release) {
        String iatHtqType = "";

        if (release.getItem() == null || release.getItem().getContent() == null) {
            return iatHtqType;
        }

        for (ItemRelease.Item.Content content : release.getItem().getContent()) {
            if (content.getLanguage().equalsIgnoreCase(ModelConstants.ItemLanguage.LANG_ENU)) {
                if (content.getStem().contains("interaction selectable")) {
                    iatHtqType = ModelConstants.ItemType.TYPE_HTQS;
                    break;
                } else {
                    iatHtqType = ModelConstants.ItemType.TYPE_HTQO;
                    break;
                }
            }
        }
        return iatHtqType;
    }
}
