package org.opentestsystem.ap.itemcompare.util;

import org.apache.commons.lang3.RandomStringUtils;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.springframework.stereotype.Component;

import java.nio.file.Path;
import java.nio.file.Paths;

@Component
public class CompareUtil {
    private final ItemBankProperties itemBankProperties;

    private static final int MAX_IMPORT_ITEM_ID = 200000;


    public CompareUtil(ItemBankProperties itemBankProperties) {
        this.itemBankProperties = itemBankProperties;
    }

    /**
     *
     * @param itemId
     * @return
     */
    public boolean isImported(String itemId) {
        return Integer.parseInt(itemId) < MAX_IMPORT_ITEM_ID;
    }

    /**
     *
     * @param importItemId
     * @return
     */
    public Path generateItemPath(String importItemId) {
        Path localRepositoryPath = this.generateLocalItemPath(
                this.itemBankProperties.getLocalBaseDir(),
                RandomStringUtils.randomAlphabetic(8));
        localRepositoryPath.toFile().mkdirs();
        return localRepositoryPath;
    }

    /**
     * Creates the local file system path to the item repository in the item bank.  The formatting is
     * {localBaseDir/randomFolderName/itemId}.
     *
     * @param localBaseDir  The base directory of the item repo.
     * @param randomDirName A random directory name appended to the localBaseDir
     * @param itemId        The item identifier.
     * @return The path to the item repository on the local file system.
     */
    private Path generateLocalItemPath(final String localBaseDir,
                                             final String randomDirName,
                                             final String itemId) {
        return Paths.get(localBaseDir, randomDirName, itemId);
    }

    private Path generateLocalItemPath(final String localBaseDir,
                                       final String randomDirName) {
        return Paths.get(localBaseDir, randomDirName);
    }

}
