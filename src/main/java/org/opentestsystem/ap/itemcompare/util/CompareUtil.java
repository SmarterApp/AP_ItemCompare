package org.opentestsystem.ap.itemcompare.util;

import lombok.NoArgsConstructor;
import org.apache.commons.lang3.RandomStringUtils;
import org.opentestsystem.ap.itemcompare.model.FileCompareInfo;
import org.opentestsystem.ap.itemcompare.report.ItemReportFile;
import org.springframework.stereotype.Component;
import org.xmlunit.builder.DiffBuilder;
import org.xmlunit.builder.Input;
import org.xmlunit.diff.DefaultNodeMatcher;
import org.xmlunit.diff.Diff;
import org.xmlunit.diff.Difference;
import org.xmlunit.diff.ElementSelectors;

import javax.xml.namespace.QName;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Date;

@Component
@NoArgsConstructor
public class CompareUtil {
    private static final int MAX_IMPORT_ITEM_ID = 200000;

    /**
     *
     * @param itemId
     * @return
     */
    public static boolean isImported(String itemId) {
        return Integer.parseInt(itemId) < MAX_IMPORT_ITEM_ID;
    }

    /**
     *
     * @param localBaseDir
     * @return
     */
    public static Path createLocalRandomPath(String localBaseDir) {
        Path localRepositoryPath = Paths.get(localBaseDir, RandomStringUtils.randomAlphabetic(8));
        localRepositoryPath.toFile().mkdirs();
        return localRepositoryPath;
    }

    public static Path createLocalReportPath(String localBaseDir) {
        Path localRepositoryPath = Paths.get(localBaseDir, new SimpleDateFormat("'tims-compare-'yyyyMMddHHmmss").format(new Date()));
        localRepositoryPath.toFile().mkdirs();
        return localRepositoryPath;
    }

    public static void writeCompareResults(String itemId,
                                           FileCompareInfo fileCompareInfo,
                                           ItemReportFile itemReportFile) {
        Diff difference = DiffBuilder.compare(Input.fromFile(fileCompareInfo.getControlFile()))
                .withTest(Input.fromFile(fileCompareInfo.getTestFile()))
                .normalizeWhitespace()
                .checkForSimilar()
                .withNodeMatcher(new DefaultNodeMatcher(
                        ElementSelectors.conditionalBuilder()
                                .whenElementIsNamed("attrib")
                                .thenUse(ElementSelectors.byXPath("./name", ElementSelectors.byNameAndText))
                                .elseUse(ElementSelectors.byName)
                                .build()))
                .build();

        for (Difference diff: difference.getDifferences()) {
            itemReportFile.write(getLogStatement(itemId, fileCompareInfo.getFileName(), diff));

            //System.out.println(getLogStatement(itemId, fileName, diff));
        }
    }

    private static String getLogStatement(String itemId, String fileName, Difference diff) {
        StringBuilder sb = new StringBuilder();
        sb.append(itemId).append(",").append(fileName).append(",");
        sb.append(diff.getComparison().getType().name()).append(",");

        sb.append(diff.getComparison().getControlDetails().getXPath()).append(",");
        if (diff.getComparison().getControlDetails().getValue() instanceof QName) {
            sb.append(((QName) diff.getComparison().getControlDetails().getValue()).getLocalPart());
        } else {
            sb.append(diff.getComparison().getControlDetails().getValue());
        }
        sb.append(",");

        if (diff.getComparison().getTestDetails().getValue() instanceof QName) {
            sb.append(((QName) diff.getComparison().getTestDetails().getValue()).getLocalPart());
        } else {
            sb.append(diff.getComparison().getTestDetails().getValue());
        }

        return sb.toString();
    }
}
