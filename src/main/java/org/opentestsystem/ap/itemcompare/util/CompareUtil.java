package org.opentestsystem.ap.itemcompare.util;

import lombok.NoArgsConstructor;
import org.apache.commons.lang3.RandomStringUtils;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

@Component
@NoArgsConstructor
public class CompareUtil {
    private static final int MAX_IMPORT_ITEM_ID = 200000;

    /**
     *
     * @param itemId
     * @return
     */
    public static boolean isImported(String itemId) {
        return Integer.parseInt(itemId) < MAX_IMPORT_ITEM_ID;
    }

    /**
     *
     * @param importItemId
     * @return
     */
    public static Path generateItemPath(String importItemId, String localBaseDir) {
        Path localRepositoryPath = generateLocalItemPath(
                localBaseDir,
                RandomStringUtils.randomAlphabetic(8));
        localRepositoryPath.toFile().mkdirs();
        return localRepositoryPath;
    }

    /**
     * @param sourceZipFile
     * @param destinationDir
     */
    public static void unzipFile(final String sourceZipFile,
                                  final String destinationDir) {
        byte[] buffer = new byte[1024];

        try {
            //get the zip file content
            ZipInputStream zis =
                    new ZipInputStream(new FileInputStream(sourceZipFile));
            //get the zipped file list entry
            ZipEntry ze = zis.getNextEntry();

            while (ze != null) {

                String fileName = ze.getName();
                File newFile = new File(destinationDir + File.separator + fileName);

                //create all non exists folders
                //else you will hit FileNotFoundException for compressed folder
                new File(newFile.getParent()).mkdirs();

                FileOutputStream fos = new FileOutputStream(newFile);

                int len;
                while ((len = zis.read(buffer)) > 0) {
                    fos.write(buffer, 0, len);
                }

                fos.close();
                ze = zis.getNextEntry();
            }

            zis.closeEntry();
            zis.close();


        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * Creates the local file system path to the item repository in the item bank.  The formatting is
     * {localBaseDir/randomFolderName/itemId}.
     *
     * @param localBaseDir  The base directory of the item repo.
     * @param randomDirName A random directory name appended to the localBaseDir
     * @param itemId        The item identifier.
     * @return The path to the item repository on the local file system.
     */
    private static Path generateLocalItemPath(final String localBaseDir,
                                             final String randomDirName,
                                             final String itemId) {
        return Paths.get(localBaseDir, randomDirName, itemId);
    }

    private static Path generateLocalItemPath(final String localBaseDir,
                                       final String randomDirName) {
        return Paths.get(localBaseDir, randomDirName);
    }

}
