package org.opentestsystem.ap.itemcompare.util;

import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.ap.itemcompare.model.FileCompareInfo;
import org.opentestsystem.ap.itemcompare.report.CompareReportFile;
import org.springframework.stereotype.Component;
import org.xmlunit.builder.DiffBuilder;
import org.xmlunit.builder.Input;
import org.xmlunit.diff.Comparison;
import org.xmlunit.diff.ComparisonType;
import org.xmlunit.diff.DefaultNodeMatcher;
import org.xmlunit.diff.Diff;
import org.xmlunit.diff.Difference;
import org.xmlunit.diff.ElementSelectors;

import javax.xml.namespace.QName;
import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;

import static org.opentestsystem.ap.common.model.ItemConstants.ItemType.TYPE_STIM;

/**
 * Compare application utilities
 */
@Component
@NoArgsConstructor
@Slf4j
public class CompareUtil {
    private static final int MAX_IMPORT_ITEM_ID = 200000;
    private static final int RANDOM_DIR_NAME_CHAR_LENGTH = 8;
    private static final String QUOTE = "\"";
    private static final String COMMA = ",";

    /**
     * Checks if the item id is from an imported item
     * @param itemId
     * @return
     */
    public static boolean isImported(String itemId) {
        return Integer.parseInt(itemId) < MAX_IMPORT_ITEM_ID;
    }

    /**
     * Creates a directory with a random alphanumeric name
     * @param localBaseDir
     * @return
     */
    public static Path createLocalRandomPath(String localBaseDir) {
        Path localRepositoryPath = Paths.get(localBaseDir, RandomStringUtils.randomAlphabetic(RANDOM_DIR_NAME_CHAR_LENGTH));
        localRepositoryPath.toFile().mkdirs();
        return localRepositoryPath;
    }

    /**
     * Creates a directory to store item compare report files
     * @param localBaseDir
     * @return
     */
    public static Path createLocalReportPath(String localBaseDir) {
        Path localRepositoryPath = Paths.get(localBaseDir, new SimpleDateFormat("'tims-compare-'yyyyMMddHHmmss").format(new Date()));
        localRepositoryPath.toFile().mkdirs();
        return localRepositoryPath;
    }

    /**
     * Compares and writes results to the item report file
     * @param itemId
     * @param fileCompareInfo
     * @param compareReportFile
     */
    public static void compareAndWriteResults(String itemId,
                                              FileCompareInfo fileCompareInfo,
                                              CompareReportFile compareReportFile) {
        Diff difference = DiffBuilder.compare(Input.fromFile(fileCompareInfo.getControlFile()))
                .withTest(Input.fromFile(fileCompareInfo.getTestFile()))
                .normalizeWhitespace()
                .checkForSimilar()
                .withNodeMatcher(new DefaultNodeMatcher(
                        ElementSelectors.conditionalBuilder()
                                .whenElementIsNamed("attrib")
                                .thenUse(ElementSelectors.byXPath("./name", ElementSelectors.byNameAndText))
                                .elseUse(ElementSelectors.byName)
                                .build()))
//TODO:         .withNodeFilter(node -> !containsHtml(node))
                .build();

        for (Difference diff: difference.getDifferences()) {
            if (shouldWriteToLog(diff)) {
                compareReportFile.write(getLogStatement(itemId, fileCompareInfo.getFileName(), diff));
            }
        }
    }

    /**
     * Converts a text file into a collection. One element per line.
     * @param fileLocation
     * @return
     */
    public static List<String> fileToCollection(String fileLocation) {
        List<String> list = new ArrayList<>();
        try {
            list = FileUtils.readLines(new File(fileLocation), "utf-8");
        } catch (IOException ioe) {
            log.error("Unable to create a list from file: " + fileLocation, ioe);
        }
        return list;
    }

    //*****************************************************************************

    /**
     * Formats each file difference in a CSV format
     * @param itemId
     * @param fileName
     * @param diff
     * @return
     */
    private static String getLogStatement(String itemId, String fileName, Difference diff) {
        StringBuilder sb = new StringBuilder();
        sb.append(addQuotesToValue(itemId)).append(COMMA);
        sb.append(addQuotesToValue(fileName)).append(COMMA);
        sb.append(addQuotesToValue(diff.getComparison().getType().name())).append(COMMA);
        sb.append(addQuotesToValue(
                getDetailXPath(diff.getComparison().getControlDetails()))).append(COMMA);
        sb.append(addQuotesToValue(
                getDetailValue(diff.getComparison().getControlDetails()))).append(COMMA);
        sb.append(addQuotesToValue(
                getDetailValue(diff.getComparison().getTestDetails())));

        return sb.toString();
    }

    /**
     *
     * @param detail
     * @return
     */
    private static String getDetailXPath(Comparison.Detail detail) {
        if (Objects.nonNull(detail.getXPath())) {
            return detail.getXPath();
        }
        return detail.getParentXPath();
    }

    /**
     *
     * @param detail
     * @return
     */
    private static String getDetailValue(Comparison.Detail detail) {
        if (detail.getValue() instanceof QName) {
            return ((QName) detail.getValue()).getLocalPart();
        } else if (Objects.nonNull(detail.getValue())){
            return detail.getValue().toString();
        }
        return null;
    }

    /**
     *
     * @param value
     * @return
     */
    private static String addQuotesToValue(String value) {
        if (Objects.nonNull(value)) {
            return QUOTE + value.replace("\"", "\"\"") + QUOTE;
        }
        return QUOTE + "null" + QUOTE;
    }

    private static boolean shouldWriteToLog(Difference difference) {
        return (!difference.getComparison().getType().equals(ComparisonType.TEXT_VALUE) ||
                !containsHtml((String) difference.getComparison().getControlDetails().getValue())) &&
                !difference.getComparison().getType().equals(ComparisonType.CHILD_NODELIST_LENGTH);
    }

    /**
     *
     * @param value
     * @return
     */
    private static boolean containsHtml(String value) {
        return value.startsWith("<p") || value.startsWith("<itemBody");
        // TODO: Improve this check
//        Pattern pattern = Pattern.compile("<(\"[^\"]*\"|'[^']*'|[^'\">])*>");
//
//        if (Objects.nonNull(value)) {
//            Matcher matcher = pattern.matcher(value);
//            return matcher.matches();
//        }
//        return false;
    }


    /**
     * Applies the itemId renaming logic.
     * @param itemReleaseId         The item id on the ItemRelease used on the initial import
     * @param itemReleaseType       The item type used on the initial import
     * @param itemReleaseBankKey    The bankkey used on the initial import
     * @return
     */
    private static String getImportId(String itemReleaseId,
                                      String itemReleaseType,
                                      String itemReleaseBankKey)  {
        String importId = "";
        if (TYPE_STIM.equalsIgnoreCase(itemReleaseType)) {
            if ("200".equalsIgnoreCase(itemReleaseBankKey)) {
                importId = "17" + StringUtils.leftPad(itemReleaseId, 4, "0");
            } else if ("187".equalsIgnoreCase(itemReleaseBankKey)) {
                importId = "17" + StringUtils.leftPad(itemReleaseId, 4, "0");
            }
        } else {
            if ("200".equalsIgnoreCase(itemReleaseBankKey)) {
                importId = itemReleaseId;
            } else if ("187".equalsIgnoreCase(itemReleaseBankKey)) {
                importId = "18" + StringUtils.leftPad(itemReleaseId, 4, "0");
            }
        }
        return importId;
    }
}
