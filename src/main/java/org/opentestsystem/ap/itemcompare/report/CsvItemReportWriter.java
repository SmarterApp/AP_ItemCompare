package org.opentestsystem.ap.itemcompare.report;

import com.google.common.collect.ImmutableList;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.QuoteMode;
import org.opentestsystem.ap.itemcompare.model.CompareContext;
import org.opentestsystem.ap.itemcompare.model.ItemDifference;

import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

/**
 * CSV Item difference report writer.
 * This report writer outputs a row per difference for a given item.
 */
@Slf4j
public class CsvItemReportWriter implements ReportWriter {
    private static final String HeaderDifferenceType = "DIFFERENCE_TYPE";
    private static final String HeaderFilename = "FILENAME";
    private static final String HeaderLocation = "LOCATION";
    private static final String HeaderSourceValue = "IMPORT_VALUE";
    private static final String HeaderTestValue = "TIMS_VALUE";
    private static final String ErrorDifferenceType = "ERROR";

    private static final List<String> Headers = ImmutableList.of(
        HeaderDifferenceType,
        HeaderFilename,
        HeaderLocation,
        HeaderSourceValue,
        HeaderTestValue);

    private final CSVPrinter csvPrinter;

    public CsvItemReportWriter(final Path reportFile) {
        try {
            final BufferedWriter bufferedWriter = Files.newBufferedWriter(reportFile);
            csvPrinter = new CSVPrinter(bufferedWriter, CSVFormat.DEFAULT
                .withNullString("")
                .withQuoteMode(QuoteMode.MINIMAL)
                .withIgnoreHeaderCase()
                .withHeader(Headers.toArray(new String[0])));
        } catch (final IOException e) {
            log.error("Unable to create item difference report file for", e);
            throw new IllegalArgumentException("Unable to create item difference report file", e);
        }
    }

    @Override
    public void writeDifferences(final CompareContext compareContext) {
        if (compareContext.isFailed()) {
            compareContext.getErrorMessages().forEach(errorMessage ->
                printRecord(compareContext.getItemId(), toErrorRecord(errorMessage)));
        }

        compareContext.getDifferences().forEach(itemDifference ->
            printRecord(compareContext.getItemId(), toDifferenceRecord(itemDifference)));
    }

    @Override
    public void close() throws IOException {
        csvPrinter.close(true);
    }

    @Override
    public void flush() throws IOException {
        csvPrinter.flush();
    }

    private void printRecord(final String itemId, final List<String> record) {
        try {
            csvPrinter.printRecord(record);
        } catch (final IOException e) {
            throw new RuntimeException("Unable to print item difference record for item [" + itemId + "]", e);
        }
    }

    private List<String> toErrorRecord(final String errorMessage) {
        return ImmutableList.of(
            ErrorDifferenceType,
            "",
            "",
            "",
            errorMessage);
    }

    private List<String> toDifferenceRecord(final ItemDifference difference) {
        return newArrayList(
            difference.getDifferenceType(),
            difference.getFilename(),
            difference.getLocation(),
            difference.getSourceValue(),
            difference.getTestValue()
        );
    }
}
